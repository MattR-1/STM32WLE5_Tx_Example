
WIO-E5-LE-Tx_Bsp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043e8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004528  08004528  00005528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046bc  080046bc  000060a0  2**0
                  CONTENTS
  4 .ARM          00000008  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c4  080046c4  000060a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080046cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200000a0  0800476c  000060a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800476c  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000060a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb72  00000000  00000000  000060ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002335  00000000  00000000  00014c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00016f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c28  00000000  00000000  00017f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019279  00000000  00000000  00018ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcab  00000000  00000000  00031e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e565  00000000  00000000  00041acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004768  00000000  00000000  000e0074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000e47dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a0 	.word	0x200000a0
 800015c:	00000000 	.word	0x00000000
 8000160:	08004510 	.word	0x08004510

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000a4 	.word	0x200000a4
 800017c:	08004510 	.word	0x08004510

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b96a 	b.w	800050c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	460c      	mov	r4, r1
 8000258:	2b00      	cmp	r3, #0
 800025a:	d14e      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025c:	4694      	mov	ip, r2
 800025e:	458c      	cmp	ip, r1
 8000260:	4686      	mov	lr, r0
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	d962      	bls.n	800032e <__udivmoddi4+0xde>
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0320 	rsb	r3, r2, #32
 800026e:	4091      	lsls	r1, r2
 8000270:	fa20 f303 	lsr.w	r3, r0, r3
 8000274:	fa0c fc02 	lsl.w	ip, ip, r2
 8000278:	4319      	orrs	r1, r3
 800027a:	fa00 fe02 	lsl.w	lr, r0, r2
 800027e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000282:	fa1f f68c 	uxth.w	r6, ip
 8000286:	fbb1 f4f7 	udiv	r4, r1, r7
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	fb07 1114 	mls	r1, r7, r4, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb04 f106 	mul.w	r1, r4, r6
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a6:	f080 8112 	bcs.w	80004ce <__udivmoddi4+0x27e>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 810f 	bls.w	80004ce <__udivmoddi4+0x27e>
 80002b0:	3c02      	subs	r4, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a59      	subs	r1, r3, r1
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80002be:	fb07 1110 	mls	r1, r7, r0, r1
 80002c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c6:	fb00 f606 	mul.w	r6, r0, r6
 80002ca:	429e      	cmp	r6, r3
 80002cc:	d90a      	bls.n	80002e4 <__udivmoddi4+0x94>
 80002ce:	eb1c 0303 	adds.w	r3, ip, r3
 80002d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d6:	f080 80fc 	bcs.w	80004d2 <__udivmoddi4+0x282>
 80002da:	429e      	cmp	r6, r3
 80002dc:	f240 80f9 	bls.w	80004d2 <__udivmoddi4+0x282>
 80002e0:	4463      	add	r3, ip
 80002e2:	3802      	subs	r0, #2
 80002e4:	1b9b      	subs	r3, r3, r6
 80002e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa6>
 80002ee:	40d3      	lsrs	r3, r2
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xba>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb4>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa6>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x150>
 8000312:	42a3      	cmp	r3, r4
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xcc>
 8000316:	4290      	cmp	r0, r2
 8000318:	f0c0 80f0 	bcc.w	80004fc <__udivmoddi4+0x2ac>
 800031c:	1a86      	subs	r6, r0, r2
 800031e:	eb64 0303 	sbc.w	r3, r4, r3
 8000322:	2001      	movs	r0, #1
 8000324:	2d00      	cmp	r5, #0
 8000326:	d0e6      	beq.n	80002f6 <__udivmoddi4+0xa6>
 8000328:	e9c5 6300 	strd	r6, r3, [r5]
 800032c:	e7e3      	b.n	80002f6 <__udivmoddi4+0xa6>
 800032e:	2a00      	cmp	r2, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x204>
 8000334:	eba1 040c 	sub.w	r4, r1, ip
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	fa1f f78c 	uxth.w	r7, ip
 8000340:	2101      	movs	r1, #1
 8000342:	fbb4 f6f8 	udiv	r6, r4, r8
 8000346:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034a:	fb08 4416 	mls	r4, r8, r6, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb07 f006 	mul.w	r0, r7, r6
 8000356:	4298      	cmp	r0, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x11c>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x11a>
 8000364:	4298      	cmp	r0, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2b4>
 800036a:	4626      	mov	r6, r4
 800036c:	1a1c      	subs	r4, r3, r0
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb4 f0f8 	udiv	r0, r4, r8
 8000376:	fb08 4410 	mls	r4, r8, r0, r4
 800037a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037e:	fb00 f707 	mul.w	r7, r0, r7
 8000382:	429f      	cmp	r7, r3
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x148>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 34ff 	add.w	r4, r0, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x146>
 8000390:	429f      	cmp	r7, r3
 8000392:	f200 80b0 	bhi.w	80004f6 <__udivmoddi4+0x2a6>
 8000396:	4620      	mov	r0, r4
 8000398:	1bdb      	subs	r3, r3, r7
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x9c>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80003b0:	fa04 f301 	lsl.w	r3, r4, r1
 80003b4:	ea43 030c 	orr.w	r3, r3, ip
 80003b8:	40f4      	lsrs	r4, r6
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	0c38      	lsrs	r0, r7, #16
 80003c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c4:	fbb4 fef0 	udiv	lr, r4, r0
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	fb00 441e 	mls	r4, r0, lr, r4
 80003d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d4:	fb0e f90c 	mul.w	r9, lr, ip
 80003d8:	45a1      	cmp	r9, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d90a      	bls.n	80003f6 <__udivmoddi4+0x1a6>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e6:	f080 8084 	bcs.w	80004f2 <__udivmoddi4+0x2a2>
 80003ea:	45a1      	cmp	r9, r4
 80003ec:	f240 8081 	bls.w	80004f2 <__udivmoddi4+0x2a2>
 80003f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	eba4 0409 	sub.w	r4, r4, r9
 80003fa:	fa1f f983 	uxth.w	r9, r3
 80003fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000402:	fb00 4413 	mls	r4, r0, r3, r4
 8000406:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800040a:	fb03 fc0c 	mul.w	ip, r3, ip
 800040e:	45a4      	cmp	ip, r4
 8000410:	d907      	bls.n	8000422 <__udivmoddi4+0x1d2>
 8000412:	193c      	adds	r4, r7, r4
 8000414:	f103 30ff 	add.w	r0, r3, #4294967295
 8000418:	d267      	bcs.n	80004ea <__udivmoddi4+0x29a>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d965      	bls.n	80004ea <__udivmoddi4+0x29a>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000426:	fba0 9302 	umull	r9, r3, r0, r2
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	429c      	cmp	r4, r3
 8000430:	46ce      	mov	lr, r9
 8000432:	469c      	mov	ip, r3
 8000434:	d351      	bcc.n	80004da <__udivmoddi4+0x28a>
 8000436:	d04e      	beq.n	80004d6 <__udivmoddi4+0x286>
 8000438:	b155      	cbz	r5, 8000450 <__udivmoddi4+0x200>
 800043a:	ebb8 030e 	subs.w	r3, r8, lr
 800043e:	eb64 040c 	sbc.w	r4, r4, ip
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	40cb      	lsrs	r3, r1
 8000448:	431e      	orrs	r6, r3
 800044a:	40cc      	lsrs	r4, r1
 800044c:	e9c5 6400 	strd	r6, r4, [r5]
 8000450:	2100      	movs	r1, #0
 8000452:	e750      	b.n	80002f6 <__udivmoddi4+0xa6>
 8000454:	f1c2 0320 	rsb	r3, r2, #32
 8000458:	fa20 f103 	lsr.w	r1, r0, r3
 800045c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000460:	fa24 f303 	lsr.w	r3, r4, r3
 8000464:	4094      	lsls	r4, r2
 8000466:	430c      	orrs	r4, r1
 8000468:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800046c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000470:	fa1f f78c 	uxth.w	r7, ip
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3110 	mls	r1, r8, r0, r3
 800047c:	0c23      	lsrs	r3, r4, #16
 800047e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000482:	fb00 f107 	mul.w	r1, r0, r7
 8000486:	4299      	cmp	r1, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x24c>
 800048a:	eb1c 0303 	adds.w	r3, ip, r3
 800048e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000492:	d22c      	bcs.n	80004ee <__udivmoddi4+0x29e>
 8000494:	4299      	cmp	r1, r3
 8000496:	d92a      	bls.n	80004ee <__udivmoddi4+0x29e>
 8000498:	3802      	subs	r0, #2
 800049a:	4463      	add	r3, ip
 800049c:	1a5b      	subs	r3, r3, r1
 800049e:	b2a4      	uxth	r4, r4
 80004a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a4:	fb08 3311 	mls	r3, r8, r1, r3
 80004a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004ac:	fb01 f307 	mul.w	r3, r1, r7
 80004b0:	42a3      	cmp	r3, r4
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x276>
 80004b4:	eb1c 0404 	adds.w	r4, ip, r4
 80004b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004bc:	d213      	bcs.n	80004e6 <__udivmoddi4+0x296>
 80004be:	42a3      	cmp	r3, r4
 80004c0:	d911      	bls.n	80004e6 <__udivmoddi4+0x296>
 80004c2:	3902      	subs	r1, #2
 80004c4:	4464      	add	r4, ip
 80004c6:	1ae4      	subs	r4, r4, r3
 80004c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004cc:	e739      	b.n	8000342 <__udivmoddi4+0xf2>
 80004ce:	4604      	mov	r4, r0
 80004d0:	e6f0      	b.n	80002b4 <__udivmoddi4+0x64>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e706      	b.n	80002e4 <__udivmoddi4+0x94>
 80004d6:	45c8      	cmp	r8, r9
 80004d8:	d2ae      	bcs.n	8000438 <__udivmoddi4+0x1e8>
 80004da:	ebb9 0e02 	subs.w	lr, r9, r2
 80004de:	eb63 0c07 	sbc.w	ip, r3, r7
 80004e2:	3801      	subs	r0, #1
 80004e4:	e7a8      	b.n	8000438 <__udivmoddi4+0x1e8>
 80004e6:	4631      	mov	r1, r6
 80004e8:	e7ed      	b.n	80004c6 <__udivmoddi4+0x276>
 80004ea:	4603      	mov	r3, r0
 80004ec:	e799      	b.n	8000422 <__udivmoddi4+0x1d2>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e7d4      	b.n	800049c <__udivmoddi4+0x24c>
 80004f2:	46d6      	mov	lr, sl
 80004f4:	e77f      	b.n	80003f6 <__udivmoddi4+0x1a6>
 80004f6:	4463      	add	r3, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e74d      	b.n	8000398 <__udivmoddi4+0x148>
 80004fc:	4606      	mov	r6, r0
 80004fe:	4623      	mov	r3, r4
 8000500:	4608      	mov	r0, r1
 8000502:	e70f      	b.n	8000324 <__udivmoddi4+0xd4>
 8000504:	3e02      	subs	r6, #2
 8000506:	4463      	add	r3, ip
 8000508:	e730      	b.n	800036c <__udivmoddi4+0x11c>
 800050a:	bf00      	nop

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800051c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800051e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4013      	ands	r3, r2
 8000532:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000534:	68fb      	ldr	r3, [r7, #12]
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fbbf 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f9ad 	bl	80008a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 fa5b 	bl	8000a08 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000552:	f000 f9fb 	bl	800094c <MX_SUBGHZ_Init>
  MX_USART1_UART_Init();
 8000556:	f000 fa0b 	bl	8000970 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2120      	movs	r1, #32
 800055e:	48b9      	ldr	r0, [pc, #740]	@ (8000844 <main+0x304>)
 8000560:	f000 fe8e 	bl	8001280 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000564:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000568:	f000 fc24 	bl	8000db4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2120      	movs	r1, #32
 8000570:	48b4      	ldr	r0, [pc, #720]	@ (8000844 <main+0x304>)
 8000572:	f000 fe85 	bl	8001280 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000576:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800057a:	f000 fc1b 	bl	8000db4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2120      	movs	r1, #32
 8000582:	48b0      	ldr	r0, [pc, #704]	@ (8000844 <main+0x304>)
 8000584:	f000 fe7c 	bl	8001280 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8000588:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800058c:	f000 fc12 	bl	8000db4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2120      	movs	r1, #32
 8000594:	48ab      	ldr	r0, [pc, #684]	@ (8000844 <main+0x304>)
 8000596:	f000 fe73 	bl	8001280 <HAL_GPIO_WritePin>

  sprintf(uart_buff, "\n\rOKAAAAAYYYYYY LETS GO! \n\r");
 800059a:	49ab      	ldr	r1, [pc, #684]	@ (8000848 <main+0x308>)
 800059c:	48ab      	ldr	r0, [pc, #684]	@ (800084c <main+0x30c>)
 800059e:	f003 fb17 	bl	8003bd0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 80005a2:	2364      	movs	r3, #100	@ 0x64
 80005a4:	2241      	movs	r2, #65	@ 0x41
 80005a6:	49a9      	ldr	r1, [pc, #676]	@ (800084c <main+0x30c>)
 80005a8:	48a9      	ldr	r0, [pc, #676]	@ (8000850 <main+0x310>)
 80005aa:	f002 fd5e 	bl	800306a <HAL_UART_Transmit>

  // 1. Set Buffer Address
  RadioParam[0] = 0x80U;
 80005ae:	4ba9      	ldr	r3, [pc, #676]	@ (8000854 <main+0x314>)
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x00U;
 80005b4:	4ba7      	ldr	r3, [pc, #668]	@ (8000854 <main+0x314>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	705a      	strb	r2, [r3, #1]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_BUFFERBASEADDRESS, &RadioParam, 2) != HAL_OK)
 80005ba:	2302      	movs	r3, #2
 80005bc:	4aa5      	ldr	r2, [pc, #660]	@ (8000854 <main+0x314>)
 80005be:	218f      	movs	r1, #143	@ 0x8f
 80005c0:	48a5      	ldr	r0, [pc, #660]	@ (8000858 <main+0x318>)
 80005c2:	f002 faba 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <main+0x90>
  {
	  Error_Handler();
 80005cc:	f000 fa44 	bl	8000a58 <Error_Handler>
  }


  // 2. Write Payload to Buffer
  if (HAL_SUBGHZ_WriteBuffer(&hsubghz, 0x80U, &payload, sizeof(payload)) != HAL_OK)
 80005d0:	2340      	movs	r3, #64	@ 0x40
 80005d2:	4aa2      	ldr	r2, [pc, #648]	@ (800085c <main+0x31c>)
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	48a0      	ldr	r0, [pc, #640]	@ (8000858 <main+0x318>)
 80005d8:	f002 fb62 	bl	8002ca0 <HAL_SUBGHZ_WriteBuffer>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <main+0xa6>
  {
	  Error_Handler();
 80005e2:	f000 fa39 	bl	8000a58 <Error_Handler>
  }


  // 3. Set Packet Type
  RadioParam[0] = 0x01U;
 80005e6:	4b9b      	ldr	r3, [pc, #620]	@ (8000854 <main+0x314>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETTYPE, &RadioParam, 1) != HAL_OK)
 80005ec:	2301      	movs	r3, #1
 80005ee:	4a99      	ldr	r2, [pc, #612]	@ (8000854 <main+0x314>)
 80005f0:	218a      	movs	r1, #138	@ 0x8a
 80005f2:	4899      	ldr	r0, [pc, #612]	@ (8000858 <main+0x318>)
 80005f4:	f002 faa1 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <main+0xc2>
  {
	  Error_Handler();
 80005fe:	f000 fa2b 	bl	8000a58 <Error_Handler>
  }


  // 4. Set Frame Format
  RadioParam[0] = 0x00U;
 8000602:	4b94      	ldr	r3, [pc, #592]	@ (8000854 <main+0x314>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x0CU;
 8000608:	4b92      	ldr	r3, [pc, #584]	@ (8000854 <main+0x314>)
 800060a:	220c      	movs	r2, #12
 800060c:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x00U;
 800060e:	4b91      	ldr	r3, [pc, #580]	@ (8000854 <main+0x314>)
 8000610:	2200      	movs	r2, #0
 8000612:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x40U;
 8000614:	4b8f      	ldr	r3, [pc, #572]	@ (8000854 <main+0x314>)
 8000616:	2240      	movs	r2, #64	@ 0x40
 8000618:	70da      	strb	r2, [r3, #3]
  RadioParam[4] = 0x01U;
 800061a:	4b8e      	ldr	r3, [pc, #568]	@ (8000854 <main+0x314>)
 800061c:	2201      	movs	r2, #1
 800061e:	711a      	strb	r2, [r3, #4]
  RadioParam[5] = 0x00U;
 8000620:	4b8c      	ldr	r3, [pc, #560]	@ (8000854 <main+0x314>)
 8000622:	2200      	movs	r2, #0
 8000624:	715a      	strb	r2, [r3, #5]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACKETPARAMS, &RadioParam, 6) != HAL_OK)
 8000626:	2306      	movs	r3, #6
 8000628:	4a8a      	ldr	r2, [pc, #552]	@ (8000854 <main+0x314>)
 800062a:	218c      	movs	r1, #140	@ 0x8c
 800062c:	488a      	ldr	r0, [pc, #552]	@ (8000858 <main+0x318>)
 800062e:	f002 fa84 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <main+0xfc>
  {
	  Error_Handler();
 8000638:	f000 fa0e 	bl	8000a58 <Error_Handler>
  }


  // 5. Define synchronisation word
  RadioParam[0] = 0x14U;
 800063c:	4b85      	ldr	r3, [pc, #532]	@ (8000854 <main+0x314>)
 800063e:	2214      	movs	r2, #20
 8000640:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x24U;
 8000642:	4b84      	ldr	r3, [pc, #528]	@ (8000854 <main+0x314>)
 8000644:	2224      	movs	r2, #36	@ 0x24
 8000646:	705a      	strb	r2, [r3, #1]

  if (HAL_SUBGHZ_WriteRegisters(&hsubghz, (uint16_t) 0x740, &RadioParam, 2) != HAL_OK)
 8000648:	2302      	movs	r3, #2
 800064a:	4a82      	ldr	r2, [pc, #520]	@ (8000854 <main+0x314>)
 800064c:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 8000650:	4881      	ldr	r0, [pc, #516]	@ (8000858 <main+0x318>)
 8000652:	f002 fa13 	bl	8002a7c <HAL_SUBGHZ_WriteRegisters>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <main+0x120>
  {
	  Error_Handler();
 800065c:	f000 f9fc 	bl	8000a58 <Error_Handler>
  }


  // 6. Define RF Frequency
  RadioParam[0] = 0x33U;
 8000660:	4b7c      	ldr	r3, [pc, #496]	@ (8000854 <main+0x314>)
 8000662:	2233      	movs	r2, #51	@ 0x33
 8000664:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0xBCU;
 8000666:	4b7b      	ldr	r3, [pc, #492]	@ (8000854 <main+0x314>)
 8000668:	22bc      	movs	r2, #188	@ 0xbc
 800066a:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0xA1U;
 800066c:	4b79      	ldr	r3, [pc, #484]	@ (8000854 <main+0x314>)
 800066e:	22a1      	movs	r2, #161	@ 0xa1
 8000670:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x00U;
 8000672:	4b78      	ldr	r3, [pc, #480]	@ (8000854 <main+0x314>)
 8000674:	2200      	movs	r2, #0
 8000676:	70da      	strb	r2, [r3, #3]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_RFFREQUENCY, &RadioParam, 4) != HAL_OK)
 8000678:	2304      	movs	r3, #4
 800067a:	4a76      	ldr	r2, [pc, #472]	@ (8000854 <main+0x314>)
 800067c:	2186      	movs	r1, #134	@ 0x86
 800067e:	4876      	ldr	r0, [pc, #472]	@ (8000858 <main+0x318>)
 8000680:	f002 fa5b 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <main+0x14e>
  {
	  Error_Handler();
 800068a:	f000 f9e5 	bl	8000a58 <Error_Handler>
  }


  // 7. Set PA Config
  RadioParam[0] = 0x04U;
 800068e:	4b71      	ldr	r3, [pc, #452]	@ (8000854 <main+0x314>)
 8000690:	2204      	movs	r2, #4
 8000692:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x00U;
 8000694:	4b6f      	ldr	r3, [pc, #444]	@ (8000854 <main+0x314>)
 8000696:	2200      	movs	r2, #0
 8000698:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x01U;
 800069a:	4b6e      	ldr	r3, [pc, #440]	@ (8000854 <main+0x314>)
 800069c:	2201      	movs	r2, #1
 800069e:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x01U;
 80006a0:	4b6c      	ldr	r3, [pc, #432]	@ (8000854 <main+0x314>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	70da      	strb	r2, [r3, #3]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_PACONFIG, &RadioParam, 4) != HAL_OK)
 80006a6:	2304      	movs	r3, #4
 80006a8:	4a6a      	ldr	r2, [pc, #424]	@ (8000854 <main+0x314>)
 80006aa:	2195      	movs	r1, #149	@ 0x95
 80006ac:	486a      	ldr	r0, [pc, #424]	@ (8000858 <main+0x318>)
 80006ae:	f002 fa44 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <main+0x17c>
  {
	  Error_Handler();
 80006b8:	f000 f9ce 	bl	8000a58 <Error_Handler>
  }


  // 8.  Set Tx Parameters
  RadioParam[0] = 0x0EU;
 80006bc:	4b65      	ldr	r3, [pc, #404]	@ (8000854 <main+0x314>)
 80006be:	220e      	movs	r2, #14
 80006c0:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x04U;
 80006c2:	4b64      	ldr	r3, [pc, #400]	@ (8000854 <main+0x314>)
 80006c4:	2204      	movs	r2, #4
 80006c6:	705a      	strb	r2, [r3, #1]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TXPARAMS, &RadioParam, 2) != HAL_OK)
 80006c8:	2302      	movs	r3, #2
 80006ca:	4a62      	ldr	r2, [pc, #392]	@ (8000854 <main+0x314>)
 80006cc:	218e      	movs	r1, #142	@ 0x8e
 80006ce:	4862      	ldr	r0, [pc, #392]	@ (8000858 <main+0x318>)
 80006d0:	f002 fa33 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <main+0x19e>
  {
	  Error_Handler();
 80006da:	f000 f9bd 	bl	8000a58 <Error_Handler>
  }


  // 9. Set Modulation parameter
  RadioParam[0] = 0x07U;
 80006de:	4b5d      	ldr	r3, [pc, #372]	@ (8000854 <main+0x314>)
 80006e0:	2207      	movs	r2, #7
 80006e2:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0x09U;
 80006e4:	4b5b      	ldr	r3, [pc, #364]	@ (8000854 <main+0x314>)
 80006e6:	2209      	movs	r2, #9
 80006e8:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x01U;
 80006ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000854 <main+0x314>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x00U;
 80006f0:	4b58      	ldr	r3, [pc, #352]	@ (8000854 <main+0x314>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	70da      	strb	r2, [r3, #3]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_MODULATIONPARAMS, &RadioParam, 4) != HAL_OK)
 80006f6:	2304      	movs	r3, #4
 80006f8:	4a56      	ldr	r2, [pc, #344]	@ (8000854 <main+0x314>)
 80006fa:	218b      	movs	r1, #139	@ 0x8b
 80006fc:	4856      	ldr	r0, [pc, #344]	@ (8000858 <main+0x318>)
 80006fe:	f002 fa1c 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <main+0x1cc>
  {
	  Error_Handler();
 8000708:	f000 f9a6 	bl	8000a58 <Error_Handler>
  }


  // 10. Configure interrupts
  RadioParam[0] = 0x02U;
 800070c:	4b51      	ldr	r3, [pc, #324]	@ (8000854 <main+0x314>)
 800070e:	2202      	movs	r2, #2
 8000710:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0xC1U;
 8000712:	4b50      	ldr	r3, [pc, #320]	@ (8000854 <main+0x314>)
 8000714:	22c1      	movs	r2, #193	@ 0xc1
 8000716:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x00U;
 8000718:	4b4e      	ldr	r3, [pc, #312]	@ (8000854 <main+0x314>)
 800071a:	2200      	movs	r2, #0
 800071c:	709a      	strb	r2, [r3, #2]
  RadioParam[3] = 0x00U;
 800071e:	4b4d      	ldr	r3, [pc, #308]	@ (8000854 <main+0x314>)
 8000720:	2200      	movs	r2, #0
 8000722:	70da      	strb	r2, [r3, #3]
  RadioParam[4] = 0x00U;
 8000724:	4b4b      	ldr	r3, [pc, #300]	@ (8000854 <main+0x314>)
 8000726:	2200      	movs	r2, #0
 8000728:	711a      	strb	r2, [r3, #4]
  RadioParam[5] = 0x00U;
 800072a:	4b4a      	ldr	r3, [pc, #296]	@ (8000854 <main+0x314>)
 800072c:	2200      	movs	r2, #0
 800072e:	715a      	strb	r2, [r3, #5]
  RadioParam[6] = 0x00U;
 8000730:	4b48      	ldr	r3, [pc, #288]	@ (8000854 <main+0x314>)
 8000732:	2200      	movs	r2, #0
 8000734:	719a      	strb	r2, [r3, #6]
  RadioParam[7] = 0x00U;
 8000736:	4b47      	ldr	r3, [pc, #284]	@ (8000854 <main+0x314>)
 8000738:	2200      	movs	r2, #0
 800073a:	71da      	strb	r2, [r3, #7]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_CFG_DIOIRQ, &RadioParam, 8) != HAL_OK)
 800073c:	2308      	movs	r3, #8
 800073e:	4a45      	ldr	r2, [pc, #276]	@ (8000854 <main+0x314>)
 8000740:	2108      	movs	r1, #8
 8000742:	4845      	ldr	r0, [pc, #276]	@ (8000858 <main+0x318>)
 8000744:	f002 f9f9 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <main+0x212>
  {
	  Error_Handler();
 800074e:	f000 f983 	bl	8000a58 <Error_Handler>
  }


  // 10.1 Clear Interrupts
  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, &interrupts, 3) != HAL_OK)
 8000752:	2303      	movs	r3, #3
 8000754:	4a42      	ldr	r2, [pc, #264]	@ (8000860 <main+0x320>)
 8000756:	2112      	movs	r1, #18
 8000758:	483f      	ldr	r0, [pc, #252]	@ (8000858 <main+0x318>)
 800075a:	f002 fa4d 	bl	8002bf8 <HAL_SUBGHZ_ExecGetCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <main+0x228>
  {
	  Error_Handler();
 8000764:	f000 f978 	bl	8000a58 <Error_Handler>
  }

  sprintf(uart_buff, "Interrupts after set:  %i %i %i \n\r", interrupts[0], interrupts[1], interrupts[2]);
 8000768:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <main+0x320>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	461a      	mov	r2, r3
 800076e:	4b3c      	ldr	r3, [pc, #240]	@ (8000860 <main+0x320>)
 8000770:	785b      	ldrb	r3, [r3, #1]
 8000772:	4619      	mov	r1, r3
 8000774:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <main+0x320>)
 8000776:	789b      	ldrb	r3, [r3, #2]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	460b      	mov	r3, r1
 800077c:	4939      	ldr	r1, [pc, #228]	@ (8000864 <main+0x324>)
 800077e:	4833      	ldr	r0, [pc, #204]	@ (800084c <main+0x30c>)
 8000780:	f003 fa26 	bl	8003bd0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 8000784:	2364      	movs	r3, #100	@ 0x64
 8000786:	2241      	movs	r2, #65	@ 0x41
 8000788:	4930      	ldr	r1, [pc, #192]	@ (800084c <main+0x30c>)
 800078a:	4831      	ldr	r0, [pc, #196]	@ (8000850 <main+0x310>)
 800078c:	f002 fc6d 	bl	800306a <HAL_UART_Transmit>




  // 11. Set Tx
  RadioParam[0] = 0x09U;
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <main+0x314>)
 8000792:	2209      	movs	r2, #9
 8000794:	701a      	strb	r2, [r3, #0]
  RadioParam[1] = 0xC4U;
 8000796:	4b2f      	ldr	r3, [pc, #188]	@ (8000854 <main+0x314>)
 8000798:	22c4      	movs	r2, #196	@ 0xc4
 800079a:	705a      	strb	r2, [r3, #1]
  RadioParam[2] = 0x00U;
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <main+0x314>)
 800079e:	2200      	movs	r2, #0
 80007a0:	709a      	strb	r2, [r3, #2]

  if (HAL_SUBGHZ_ExecSetCmd(&hsubghz, RADIO_SET_TX, &RadioParam, 3) != HAL_OK)
 80007a2:	2303      	movs	r3, #3
 80007a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <main+0x314>)
 80007a6:	2183      	movs	r1, #131	@ 0x83
 80007a8:	482b      	ldr	r0, [pc, #172]	@ (8000858 <main+0x318>)
 80007aa:	f002 f9c6 	bl	8002b3a <HAL_SUBGHZ_ExecSetCmd>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <main+0x278>
  {
	  Error_Handler();
 80007b4:	f000 f950 	bl	8000a58 <Error_Handler>

  // Check interrupts

  do
  {
	  sprintf(uart_buff, "Interrupts after send: %i %i %i \n\r", interrupts[0], interrupts[1], interrupts[2]);
 80007b8:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <main+0x320>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <main+0x320>)
 80007c0:	785b      	ldrb	r3, [r3, #1]
 80007c2:	4619      	mov	r1, r3
 80007c4:	4b26      	ldr	r3, [pc, #152]	@ (8000860 <main+0x320>)
 80007c6:	789b      	ldrb	r3, [r3, #2]
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	460b      	mov	r3, r1
 80007cc:	4926      	ldr	r1, [pc, #152]	@ (8000868 <main+0x328>)
 80007ce:	481f      	ldr	r0, [pc, #124]	@ (800084c <main+0x30c>)
 80007d0:	f003 f9fe 	bl	8003bd0 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 80007d4:	2364      	movs	r3, #100	@ 0x64
 80007d6:	2241      	movs	r2, #65	@ 0x41
 80007d8:	491c      	ldr	r1, [pc, #112]	@ (800084c <main+0x30c>)
 80007da:	481d      	ldr	r0, [pc, #116]	@ (8000850 <main+0x310>)
 80007dc:	f002 fc45 	bl	800306a <HAL_UART_Transmit>

	  if (HAL_SUBGHZ_ExecGetCmd(&hsubghz, RADIO_GET_IRQSTATUS, &interrupts, 3) != HAL_OK)
 80007e0:	2303      	movs	r3, #3
 80007e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000860 <main+0x320>)
 80007e4:	2112      	movs	r1, #18
 80007e6:	481c      	ldr	r0, [pc, #112]	@ (8000858 <main+0x318>)
 80007e8:	f002 fa06 	bl	8002bf8 <HAL_SUBGHZ_ExecGetCmd>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <main+0x2b6>
	  {
		  Error_Handler();
 80007f2:	f000 f931 	bl	8000a58 <Error_Handler>
	  }

	  if(interrupts[1] = 1)
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <main+0x320>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	705a      	strb	r2, [r3, #1]
	  {
		  signal_delay = 1000;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	@ (800086c <main+0x32c>)
 80007fe:	22e8      	movs	r2, #232	@ 0xe8
 8000800:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(2000);
 8000802:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000806:	f000 fad5 	bl	8000db4 <HAL_Delay>
  } while (interrupts[1] != 0 | interrupts[2] != 0);
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <main+0x320>)
 800080c:	785a      	ldrb	r2, [r3, #1]
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <main+0x320>)
 8000810:	789b      	ldrb	r3, [r3, #2]
 8000812:	4313      	orrs	r3, r2
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1ce      	bne.n	80007b8 <main+0x278>


  sprintf(uart_buff, "Interrupts: %i %i %i \n\r", interrupts[0], interrupts[1], interrupts[2]);
 800081a:	4b11      	ldr	r3, [pc, #68]	@ (8000860 <main+0x320>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461a      	mov	r2, r3
 8000820:	4b0f      	ldr	r3, [pc, #60]	@ (8000860 <main+0x320>)
 8000822:	785b      	ldrb	r3, [r3, #1]
 8000824:	4619      	mov	r1, r3
 8000826:	4b0e      	ldr	r3, [pc, #56]	@ (8000860 <main+0x320>)
 8000828:	789b      	ldrb	r3, [r3, #2]
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	460b      	mov	r3, r1
 800082e:	4910      	ldr	r1, [pc, #64]	@ (8000870 <main+0x330>)
 8000830:	4806      	ldr	r0, [pc, #24]	@ (800084c <main+0x30c>)
 8000832:	f003 f9cd 	bl	8003bd0 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)uart_buff, sizeof(uart_buff), 100);
 8000836:	2364      	movs	r3, #100	@ 0x64
 8000838:	2241      	movs	r2, #65	@ 0x41
 800083a:	4904      	ldr	r1, [pc, #16]	@ (800084c <main+0x30c>)
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <main+0x310>)
 800083e:	f002 fc14 	bl	800306a <HAL_UART_Transmit>
 8000842:	e017      	b.n	8000874 <main+0x334>
 8000844:	48000400 	.word	0x48000400
 8000848:	08004528 	.word	0x08004528
 800084c:	20000168 	.word	0x20000168
 8000850:	200000c8 	.word	0x200000c8
 8000854:	2000015c 	.word	0x2000015c
 8000858:	200000bc 	.word	0x200000bc
 800085c:	20000000 	.word	0x20000000
 8000860:	20000164 	.word	0x20000164
 8000864:	08004544 	.word	0x08004544
 8000868:	08004568 	.word	0x08004568
 800086c:	20000040 	.word	0x20000040
 8000870:	0800458c 	.word	0x0800458c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2120      	movs	r1, #32
 8000878:	4809      	ldr	r0, [pc, #36]	@ (80008a0 <main+0x360>)
 800087a:	f000 fd01 	bl	8001280 <HAL_GPIO_WritePin>
	  HAL_Delay(signal_delay);
 800087e:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <main+0x364>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fa96 	bl	8000db4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2120      	movs	r1, #32
 800088c:	4804      	ldr	r0, [pc, #16]	@ (80008a0 <main+0x360>)
 800088e:	f000 fcf7 	bl	8001280 <HAL_GPIO_WritePin>
	  HAL_Delay(signal_delay);
 8000892:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <main+0x364>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f000 fa8c 	bl	8000db4 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800089c:	bf00      	nop
 800089e:	e7e9      	b.n	8000874 <main+0x334>
 80008a0:	48000400 	.word	0x48000400
 80008a4:	20000040 	.word	0x20000040

080008a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b09a      	sub	sp, #104	@ 0x68
 80008ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ae:	f107 0320 	add.w	r3, r7, #32
 80008b2:	2248      	movs	r2, #72	@ 0x48
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 f9aa 	bl	8003c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <SystemClock_Config+0xa0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80008d6:	4a1c      	ldr	r2, [pc, #112]	@ (8000948 <SystemClock_Config+0xa0>)
 80008d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008dc:	6013      	str	r3, [r2, #0]
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <SystemClock_Config+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008ea:	2320      	movs	r3, #32
 80008ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ee:	2301      	movs	r3, #1
 80008f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008f6:	2360      	movs	r3, #96	@ 0x60
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	4618      	mov	r0, r3
 8000904:	f000 ff7e 	bl	8001804 <HAL_RCC_OscConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800090e:	f000 f8a3 	bl	8000a58 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000912:	234f      	movs	r3, #79	@ 0x4f
 8000914:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800092a:	f107 0308 	add.w	r3, r7, #8
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f001 fae9 	bl	8001f08 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800093c:	f000 f88c 	bl	8000a58 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3768      	adds	r7, #104	@ 0x68
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400

0800094c <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
static void MX_SUBGHZ_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_SUBGHZ_Init+0x20>)
 8000952:	2210      	movs	r2, #16
 8000954:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_SUBGHZ_Init+0x20>)
 8000958:	f002 f82c 	bl	80029b4 <HAL_SUBGHZ_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000962:	f000 f879 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000bc 	.word	0x200000bc

08000970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 8000976:	4a23      	ldr	r2, [pc, #140]	@ (8000a04 <MX_USART1_UART_Init+0x94>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097a:	4b21      	ldr	r3, [pc, #132]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b1a      	ldr	r3, [pc, #104]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b19      	ldr	r3, [pc, #100]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b17      	ldr	r3, [pc, #92]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a6:	4b16      	ldr	r3, [pc, #88]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ac:	4b14      	ldr	r3, [pc, #80]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b2:	4b13      	ldr	r3, [pc, #76]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009b8:	4811      	ldr	r0, [pc, #68]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009ba:	f002 fb06 	bl	8002fca <HAL_UART_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009c4:	f000 f848 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	480d      	ldr	r0, [pc, #52]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009cc:	f003 f837 	bl	8003a3e <HAL_UARTEx_SetTxFifoThreshold>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009d6:	f000 f83f 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009da:	2100      	movs	r1, #0
 80009dc:	4808      	ldr	r0, [pc, #32]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009de:	f003 f86c 	bl	8003aba <HAL_UARTEx_SetRxFifoThreshold>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009e8:	f000 f836 	bl	8000a58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <MX_USART1_UART_Init+0x90>)
 80009ee:	f002 ffee 	bl	80039ce <HAL_UARTEx_DisableFifoMode>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009f8:	f000 f82e 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000c8 	.word	0x200000c8
 8000a04:	40013800 	.word	0x40013800

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fd77 	bl	8000510 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2002      	movs	r0, #2
 8000a24:	f7ff fd74 	bl	8000510 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <MX_GPIO_Init+0x4c>)
 8000a2e:	f000 fc27 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000a32:	2320      	movs	r3, #32
 8000a34:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000a36:	2311      	movs	r3, #17
 8000a38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	4803      	ldr	r0, [pc, #12]	@ (8000a54 <MX_GPIO_Init+0x4c>)
 8000a48:	f000 faba 	bl	8000fc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	48000400 	.word	0x48000400

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <Error_Handler+0x8>

08000a64 <LL_AHB2_GRP1_EnableClock>:
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000a80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4013      	ands	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a88:	68fb      	ldr	r3, [r7, #12]
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000aa0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000aa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000aac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ab0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ad0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000ad2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ae0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f7ff ffdb 	bl	8000ac4 <LL_APB3_GRP1_EnableClock>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b096      	sub	sp, #88	@ 0x58
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 030c 	add.w	r3, r7, #12
 8000b34:	2238      	movs	r2, #56	@ 0x38
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 f869 	bl	8003c10 <memset>
  if(huart->Instance==USART1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a16      	ldr	r2, [pc, #88]	@ (8000b9c <HAL_UART_MspInit+0x84>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d125      	bne.n	8000b94 <HAL_UART_MspInit+0x7c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b4c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8000b50:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b52:	f107 030c 	add.w	r3, r7, #12
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fd78 	bl	800264c <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b62:	f7ff ff79 	bl	8000a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b66:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000b6a:	f7ff ff93 	bl	8000a94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f7ff ff78 	bl	8000a64 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000b74:	23c0      	movs	r3, #192	@ 0xc0
 8000b76:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b84:	2307      	movs	r3, #7
 8000b86:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b88:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4804      	ldr	r0, [pc, #16]	@ (8000ba0 <HAL_UART_MspInit+0x88>)
 8000b90:	f000 fa16 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3758      	adds	r7, #88	@ 0x58
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	48000400 	.word	0x48000400

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <NMI_Handler+0x4>

08000bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f8c2 	bl	8000d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f002 fff8 	bl	8003c20 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20010000 	.word	0x20010000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200001ac 	.word	0x200001ac
 8000c64:	20000300 	.word	0x20000300

08000c68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	@ (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c78:	f7ff fff6 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f002 ffc3 	bl	8003c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fc4b 	bl	8000540 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000cb8:	080046cc 	.word	0x080046cc
  ldr r2, =_sbss
 8000cbc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000cc0:	200002fc 	.word	0x200002fc

08000cc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f000 f942 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000cd8:	f001 fada 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4a09      	ldr	r2, [pc, #36]	@ (8000d04 <HAL_Init+0x3c>)
 8000ce0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f810 	bl	8000d08 <HAL_InitTick>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d002      	beq.n	8000cf4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]
 8000cf2:	e001      	b.n	8000cf8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf4:	f7ff fefe 	bl	8000af4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000044 	.word	0x20000044

08000d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d14:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_InitTick+0x6c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d024      	beq.n	8000d66 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d1c:	f001 fab8 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 8000d20:	4602      	mov	r2, r0
 8000d22:	4b14      	ldr	r3, [pc, #80]	@ (8000d74 <HAL_InitTick+0x6c>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 f936 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d10f      	bne.n	8000d60 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b0f      	cmp	r3, #15
 8000d44:	d809      	bhi.n	8000d5a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d46:	2200      	movs	r2, #0
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4e:	f000 f910 	bl	8000f72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d52:	4a09      	ldr	r2, [pc, #36]	@ (8000d78 <HAL_InitTick+0x70>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e004      	b.n	8000d6a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	e001      	b.n	8000d6a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000004c 	.word	0x2000004c
 8000d78:	20000048 	.word	0x20000048

08000d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <HAL_IncTick+0x1c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a03      	ldr	r2, [pc, #12]	@ (8000d9c <HAL_IncTick+0x20>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	2000004c 	.word	0x2000004c
 8000d9c:	200001b0 	.word	0x200001b0

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b02      	ldr	r3, [pc, #8]	@ (8000db0 <HAL_GetTick+0x10>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr
 8000db0:	200001b0 	.word	0x200001b0

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff fff0 	bl	8000da0 <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffe0 	bl	8000da0 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000004c 	.word	0x2000004c

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	@ (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	@ (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	@ 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff90 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff49 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f80:	f7ff ff60 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000f84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68b9      	ldr	r1, [r7, #8]
 8000f8a:	6978      	ldr	r0, [r7, #20]
 8000f8c:	f7ff ff92 	bl	8000eb4 <NVIC_EncodePriority>
 8000f90:	4602      	mov	r2, r0
 8000f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f96:	4611      	mov	r1, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff61 	bl	8000e60 <__NVIC_SetPriority>
}
 8000f9e:	bf00      	nop
 8000fa0:	3718      	adds	r7, #24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffb2 	bl	8000f18 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e140      	b.n	8001252 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f000 8132 	beq.w	800124c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d005      	beq.n	8001000 <HAL_GPIO_Init+0x40>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d130      	bne.n	8001062 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43db      	mvns	r3, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68da      	ldr	r2, [r3, #12]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001036:	2201      	movs	r2, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	f003 0201 	and.w	r2, r3, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
 800106a:	2b03      	cmp	r3, #3
 800106c:	d017      	beq.n	800109e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d123      	bne.n	80010f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	691a      	ldr	r2, [r3, #16]
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	6939      	ldr	r1, [r7, #16]
 80010ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 0203 	and.w	r2, r3, #3
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 808c 	beq.w	800124c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a4e      	ldr	r2, [pc, #312]	@ (8001270 <HAL_GPIO_Init+0x2b0>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	2207      	movs	r2, #7
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1bc>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a44      	ldr	r2, [pc, #272]	@ (8001274 <HAL_GPIO_Init+0x2b4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1b8>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a43      	ldr	r2, [pc, #268]	@ (8001278 <HAL_GPIO_Init+0x2b8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1b4>
 8001170:	2302      	movs	r3, #2
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1be>
 8001174:	2307      	movs	r3, #7
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1be>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1be>
 800117c:	2300      	movs	r3, #0
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118e:	4938      	ldr	r1, [pc, #224]	@ (8001270 <HAL_GPIO_Init+0x2b0>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c0:	4a2e      	ldr	r2, [pc, #184]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ea:	4a24      	ldr	r2, [pc, #144]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 80011f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011f6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001216:	4a19      	ldr	r2, [pc, #100]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 8001220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001224:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <HAL_GPIO_Init+0x2bc>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	fa22 f303 	lsr.w	r3, r2, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	f47f aeb7 	bne.w	8000fd0 <HAL_GPIO_Init+0x10>
  }
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	371c      	adds	r7, #28
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	58000800 	.word	0x58000800

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800129c:	e002      	b.n	80012a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
	...

080012b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b4:	4b04      	ldr	r3, [pc, #16]	@ (80012c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a03      	ldr	r2, [pc, #12]	@ (80012c8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012be:	6013      	str	r3, [r2, #0]
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	58000400 	.word	0x58000400

080012cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80012d0:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_PWREx_GetVoltageRange+0x14>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	58000400 	.word	0x58000400

080012e4 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80012e8:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012f4:	d101      	bne.n	80012fa <LL_PWR_IsEnabledBkUpAccess+0x16>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <LL_PWR_IsEnabledBkUpAccess+0x18>
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	58000400 	.word	0x58000400

08001308 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001316:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800131a:	6013      	str	r3, [r2, #0]
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	bc80      	pop	{r7}
 8001322:	4770      	bx	lr

08001324 <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001332:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800134e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001352:	d101      	bne.n	8001358 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001374:	6013      	str	r3, [r2, #0]
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800138c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001390:	6013      	str	r3, [r2, #0]
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80013ac:	d101      	bne.n	80013b2 <LL_RCC_HSE_IsReady+0x18>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <LL_RCC_HSE_IsReady+0x1a>
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001406:	d101      	bne.n	800140c <LL_RCC_HSI_IsReady+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_RCC_HSI_IsReady+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	061b      	lsls	r3, r3, #24
 800142c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b02      	cmp	r3, #2
 8001450:	d101      	bne.n	8001456 <LL_RCC_LSE_IsReady+0x18>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <LL_RCC_LSE_IsReady+0x1a>
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800146c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800148c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d101      	bne.n	80014b8 <LL_RCC_LSI_IsReady+0x18>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <LL_RCC_LSI_IsReady+0x1a>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80014c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6013      	str	r3, [r2, #0]
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80014e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6013      	str	r3, [r2, #0]
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b02      	cmp	r3, #2
 800150a:	d101      	bne.n	8001510 <LL_RCC_MSI_IsReady+0x16>
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <LL_RCC_MSI_IsReady+0x18>
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800151e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b08      	cmp	r3, #8
 800152a:	d101      	bne.n	8001530 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800153e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800155c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr

08001568 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f023 0203 	bic.w	r2, r3, #3
 80015a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	608b      	str	r3, [r1, #8]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	608b      	str	r3, [r1, #8]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr

080015f2 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001602:	f023 020f 	bic.w	r2, r3, #15
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	091b      	lsrs	r3, r3, #4
 800160a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800160e:	4313      	orrs	r3, r2
 8001610:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr

08001644 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4313      	orrs	r3, r2
 800165e:	608b      	str	r3, [r1, #8]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800166e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001688:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80016ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016f4:	6013      	str	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr

080016fe <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800170c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001710:	d101      	bne.n	8001716 <LL_RCC_PLL_IsReady+0x18>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_RCC_PLL_IsReady+0x1a>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 0303 	and.w	r3, r3, #3
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr

0800177a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178c:	d101      	bne.n	8001792 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017b0:	d101      	bne.n	80017b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80017c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017d2:	d101      	bne.n	80017d8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80017d4:	2301      	movs	r3, #1
 80017d6:	e000      	b.n	80017da <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80017e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017f4:	d101      	bne.n	80017fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e36f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001816:	f7ff fece 	bl	80015b6 <LL_RCC_GetSysClkSource>
 800181a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181c:	f7ff ffa2 	bl	8001764 <LL_RCC_PLL_GetMainSource>
 8001820:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80c4 	beq.w	80019b8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x3e>
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	d176      	bne.n	800192a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d173      	bne.n	800192a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e353      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x68>
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800186a:	e006      	b.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800187a:	4293      	cmp	r3, r2
 800187c:	d222      	bcs.n	80018c4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	4618      	mov	r0, r3
 8001884:	f000 fd3c 	bl	8002300 <RCC_SetFlashLatencyFromMSIRange>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e331      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018b4:	4313      	orrs	r3, r2
 80018b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fe53 	bl	8001568 <LL_RCC_MSI_SetCalibTrimming>
 80018c2:	e021      	b.n	8001908 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fe3a 	bl	8001568 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fd01 	bl	8002300 <RCC_SetFlashLatencyFromMSIRange>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e2f6      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001908:	f000 fcc2 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 800190c:	4603      	mov	r3, r0
 800190e:	4aa7      	ldr	r2, [pc, #668]	@ (8001bac <HAL_RCC_OscConfig+0x3a8>)
 8001910:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001912:	4ba7      	ldr	r3, [pc, #668]	@ (8001bb0 <HAL_RCC_OscConfig+0x3ac>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff f9f6 	bl	8000d08 <HAL_InitTick>
 800191c:	4603      	mov	r3, r0
 800191e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001920:	7cfb      	ldrb	r3, [r7, #19]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d047      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001926:	7cfb      	ldrb	r3, [r7, #19]
 8001928:	e2e5      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d02c      	beq.n	800198c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001932:	f7ff fdc6 	bl	80014c2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001936:	f7ff fa33 	bl	8000da0 <HAL_GetTick>
 800193a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800193e:	f7ff fa2f 	bl	8000da0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e2d2      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001950:	f7ff fdd3 	bl	80014fa <LL_RCC_MSI_IsReady>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f1      	beq.n	800193e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001978:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800197c:	4313      	orrs	r3, r2
 800197e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fdef 	bl	8001568 <LL_RCC_MSI_SetCalibTrimming>
 800198a:	e015      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800198c:	f7ff fda7 	bl	80014de <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001990:	f7ff fa06 	bl	8000da0 <HAL_GetTick>
 8001994:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001998:	f7ff fa02 	bl	8000da0 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e2a5      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80019aa:	f7ff fda6 	bl	80014fa <LL_RCC_MSI_IsReady>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f1      	bne.n	8001998 <HAL_RCC_OscConfig+0x194>
 80019b4:	e000      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80019b6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d058      	beq.n	8001a76 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d005      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1d2>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	2b0c      	cmp	r3, #12
 80019ce:	d108      	bne.n	80019e2 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d105      	bne.n	80019e2 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d14b      	bne.n	8001a76 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e289      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80019e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a00:	d102      	bne.n	8001a08 <HAL_RCC_OscConfig+0x204>
 8001a02:	f7ff fcae 	bl	8001362 <LL_RCC_HSE_Enable>
 8001a06:	e00d      	b.n	8001a24 <HAL_RCC_OscConfig+0x220>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8001a10:	d104      	bne.n	8001a1c <HAL_RCC_OscConfig+0x218>
 8001a12:	f7ff fc79 	bl	8001308 <LL_RCC_HSE_EnableTcxo>
 8001a16:	f7ff fca4 	bl	8001362 <LL_RCC_HSE_Enable>
 8001a1a:	e003      	b.n	8001a24 <HAL_RCC_OscConfig+0x220>
 8001a1c:	f7ff fcaf 	bl	800137e <LL_RCC_HSE_Disable>
 8001a20:	f7ff fc80 	bl	8001324 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d012      	beq.n	8001a52 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff f9b8 	bl	8000da0 <HAL_GetTick>
 8001a30:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff f9b4 	bl	8000da0 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	@ 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e257      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001a46:	f7ff fca8 	bl	800139a <LL_RCC_HSE_IsReady>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f1      	beq.n	8001a34 <HAL_RCC_OscConfig+0x230>
 8001a50:	e011      	b.n	8001a76 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff f9a5 	bl	8000da0 <HAL_GetTick>
 8001a56:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5a:	f7ff f9a1 	bl	8000da0 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b64      	cmp	r3, #100	@ 0x64
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e244      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001a6c:	f7ff fc95 	bl	800139a <LL_RCC_HSE_IsReady>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f1      	bne.n	8001a5a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d046      	beq.n	8001b10 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d005      	beq.n	8001a94 <HAL_RCC_OscConfig+0x290>
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d10e      	bne.n	8001aac <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d10b      	bne.n	8001aac <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e22a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fcb6 	bl	8001416 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aaa:	e031      	b.n	8001b10 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d019      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ab4:	f7ff fc82 	bl	80013bc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f972 	bl	8000da0 <HAL_GetTick>
 8001abc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f96e 	bl	8000da0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e211      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001ad2:	f7ff fc8f 	bl	80013f4 <LL_RCC_HSI_IsReady>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f1      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fc98 	bl	8001416 <LL_RCC_HSI_SetCalibTrimming>
 8001ae6:	e013      	b.n	8001b10 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae8:	f7ff fc76 	bl	80013d8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff f958 	bl	8000da0 <HAL_GetTick>
 8001af0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff f954 	bl	8000da0 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1f7      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001b06:	f7ff fc75 	bl	80013f4 <LL_RCC_HSI_IsReady>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f1      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d06e      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d056      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b2c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d031      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e1d0      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d013      	beq.n	8001b86 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001b5e:	f7ff fc8f 	bl	8001480 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b62:	f7ff f91d 	bl	8000da0 <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f919 	bl	8000da0 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b11      	cmp	r3, #17
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1bc      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001b7c:	f7ff fc90 	bl	80014a0 <LL_RCC_LSI_IsReady>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f1      	bne.n	8001b6a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001b86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b8e:	f023 0210 	bic.w	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	f7ff fc5e 	bl	8001460 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f8fc 	bl	8000da0 <HAL_GetTick>
 8001ba8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001baa:	e00c      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3c2>
 8001bac:	20000044 	.word	0x20000044
 8001bb0:	20000048 	.word	0x20000048
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f8f4 	bl	8000da0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b11      	cmp	r3, #17
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e197      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001bc6:	f7ff fc6b 	bl	80014a0 <LL_RCC_LSI_IsReady>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f1      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x3b0>
 8001bd0:	e013      	b.n	8001bfa <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	f7ff fc55 	bl	8001480 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7ff f8e3 	bl	8000da0 <HAL_GetTick>
 8001bda:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff f8df 	bl	8000da0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b11      	cmp	r3, #17
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e182      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001bf0:	f7ff fc56 	bl	80014a0 <LL_RCC_LSI_IsReady>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1f1      	bne.n	8001bde <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 80d8 	beq.w	8001db8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c08:	f7ff fb6c 	bl	80012e4 <LL_PWR_IsEnabledBkUpAccess>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d113      	bne.n	8001c3a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001c12:	f7ff fb4d 	bl	80012b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff f8c3 	bl	8000da0 <HAL_GetTick>
 8001c1a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff f8bf 	bl	8000da0 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e162      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001c30:	f7ff fb58 	bl	80012e4 <LL_PWR_IsEnabledBkUpAccess>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f1      	beq.n	8001c1e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d07b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	2b85      	cmp	r3, #133	@ 0x85
 8001c48:	d003      	beq.n	8001c52 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c66:	f7ff f89b 	bl	8000da0 <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff f88d 	bl	8000da0 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e12e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001c98:	f7ff fbd1 	bl	800143e <LL_RCC_LSE_IsReady>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0ef      	beq.n	8001c82 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b81      	cmp	r3, #129	@ 0x81
 8001ca8:	d003      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b85      	cmp	r3, #133	@ 0x85
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb2:	f7ff f875 	bl	8000da0 <HAL_GetTick>
 8001cb6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff f867 	bl	8000da0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e108      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0ec      	beq.n	8001cce <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001cf4:	e060      	b.n	8001db8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f853 	bl	8000da0 <HAL_GetTick>
 8001cfa:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d12:	f7ff f845 	bl	8000da0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0e6      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ec      	bne.n	8001d12 <HAL_RCC_OscConfig+0x50e>
 8001d38:	e03e      	b.n	8001db8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f831 	bl	8000da0 <HAL_GetTick>
 8001d3e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff f823 	bl	8000da0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e0c4      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ec      	bne.n	8001d56 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d7c:	f7ff f810 	bl	8000da0 <HAL_GetTick>
 8001d80:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001d96:	e00a      	b.n	8001dae <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7ff f802 	bl	8000da0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0a3      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001dae:	f7ff fb46 	bl	800143e <LL_RCC_LSE_IsReady>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ef      	bne.n	8001d98 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8099 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	2b0c      	cmp	r3, #12
 8001dc6:	d06c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d14b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd0:	f7ff fc87 	bl	80016e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe ffe4 	bl	8000da0 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe ffe0 	bl	8000da0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e083      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001dee:	f7ff fc86 	bl	80016fe <LL_RCC_PLL_IsReady>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d1f1      	bne.n	8001ddc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	4b40      	ldr	r3, [pc, #256]	@ (8001f00 <HAL_RCC_OscConfig+0x6fc>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e10:	0212      	lsls	r2, r2, #8
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e18:	4311      	orrs	r1, r2
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e1e:	4311      	orrs	r1, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e24:	430a      	orrs	r2, r1
 8001e26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2e:	f7ff fc4a 	bl	80016c6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7fe ffad 	bl	8000da0 <HAL_GetTick>
 8001e46:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7fe ffa9 	bl	8000da0 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b0a      	cmp	r3, #10
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e04c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001e5c:	f7ff fc4f 	bl	80016fe <LL_RCC_PLL_IsReady>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f1      	beq.n	8001e4a <HAL_RCC_OscConfig+0x646>
 8001e66:	e045      	b.n	8001ef4 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e68:	f7ff fc3b 	bl	80016e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff98 	bl	8000da0 <HAL_GetTick>
 8001e70:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe ff94 	bl	8000da0 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b0a      	cmp	r3, #10
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e037      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001e86:	f7ff fc3a 	bl	80016fe <LL_RCC_PLL_IsReady>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f1      	bne.n	8001e74 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_RCC_OscConfig+0x700>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
 8001ea0:	e028      	b.n	8001ef4 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e023      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d115      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	11c1808c 	.word	0x11c1808c
 8001f04:	eefefffc 	.word	0xeefefffc

08001f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e10f      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b89      	ldr	r3, [pc, #548]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d91b      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b86      	ldr	r3, [pc, #536]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 0207 	bic.w	r2, r3, #7
 8001f32:	4984      	ldr	r1, [pc, #528]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f3a:	f7fe ff31 	bl	8000da0 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001f42:	f7fe ff2d 	bl	8000da0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0f3      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f54:	4b7b      	ldr	r3, [pc, #492]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d016      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fb2a 	bl	80015cc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001f78:	f7fe ff12 	bl	8000da0 <HAL_GetTick>
 8001f7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001f80:	f7fe ff0e 	bl	8000da0 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0d4      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001f92:	f7ff fbf2 	bl	800177a <LL_RCC_IsActiveFlag_HPRE>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f1      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fb20 	bl	80015f2 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fb2:	f7fe fef5 	bl	8000da0 <HAL_GetTick>
 8001fb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001fba:	f7fe fef1 	bl	8000da0 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e0b7      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001fcc:	f7ff fbe6 	bl	800179c <LL_RCC_IsActiveFlag_SHDHPRE>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f1      	beq.n	8001fba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d016      	beq.n	8002010 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fb19 	bl	800161e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001fec:	f7fe fed8 	bl	8000da0 <HAL_GetTick>
 8001ff0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001ff4:	f7fe fed4 	bl	8000da0 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e09a      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002006:	f7ff fbdb 	bl	80017c0 <LL_RCC_IsActiveFlag_PPRE1>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f1      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d017      	beq.n	800204c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb0e 	bl	8001644 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002028:	f7fe feba 	bl	8000da0 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002030:	f7fe feb6 	bl	8000da0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e07c      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002042:	f7ff fbce 	bl	80017e2 <LL_RCC_IsActiveFlag_PPRE2>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d0f1      	beq.n	8002030 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d043      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d106      	bne.n	800206e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002060:	f7ff f99b 	bl	800139a <LL_RCC_HSE_IsReady>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11e      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e066      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b03      	cmp	r3, #3
 8002074:	d106      	bne.n	8002084 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002076:	f7ff fb42 	bl	80016fe <LL_RCC_PLL_IsReady>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d113      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e05b      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800208c:	f7ff fa35 	bl	80014fa <LL_RCC_MSI_IsReady>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d108      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e050      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800209a:	f7ff f9ab 	bl	80013f4 <LL_RCC_HSI_IsReady>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e049      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fa6f 	bl	8001590 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b2:	f7fe fe75 	bl	8000da0 <HAL_GetTick>
 80020b6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7fe fe71 	bl	8000da0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e035      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d0:	f7ff fa71 	bl	80015b6 <LL_RCC_GetSysClkSource>
 80020d4:	4602      	mov	r2, r0
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1ec      	bne.n	80020ba <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b18      	ldr	r3, [pc, #96]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d21b      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 0207 	bic.w	r2, r3, #7
 80020f6:	4913      	ldr	r1, [pc, #76]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fe:	f7fe fe4f 	bl	8000da0 <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002104:	e008      	b.n	8002118 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002106:	f7fe fe4b 	bl	8000da0 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e011      	b.n	800213c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <HAL_RCC_ClockConfig+0x23c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d1ef      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002126:	f000 f8b3 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 800212a:	4603      	mov	r3, r0
 800212c:	4a06      	ldr	r2, [pc, #24]	@ (8002148 <HAL_RCC_ClockConfig+0x240>)
 800212e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_RCC_ClockConfig+0x244>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fde7 	bl	8000d08 <HAL_InitTick>
 800213a:	4603      	mov	r3, r0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	58004000 	.word	0x58004000
 8002148:	20000044 	.word	0x20000044
 800214c:	20000048 	.word	0x20000048

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800215e:	f7ff fa2a 	bl	80015b6 <LL_RCC_GetSysClkSource>
 8002162:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002164:	f7ff fafe 	bl	8001764 <LL_RCC_PLL_GetMainSource>
 8002168:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x2c>
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b0c      	cmp	r3, #12
 8002174:	d139      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d136      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800217c:	f7ff f9cd 	bl	800151a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x62>
 8002186:	f7ff f9c8 	bl	800151a <LL_RCC_MSI_IsEnabledRangeSelect>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	d106      	bne.n	800219e <HAL_RCC_GetSysClockFreq+0x4e>
 8002190:	f7ff f9d3 	bl	800153a <LL_RCC_MSI_GetRange>
 8002194:	4603      	mov	r3, r0
 8002196:	0a1b      	lsrs	r3, r3, #8
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	e005      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x5a>
 800219e:	f7ff f9d7 	bl	8001550 <LL_RCC_MSI_GetRangeAfterStandby>
 80021a2:	4603      	mov	r3, r0
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	4a36      	ldr	r2, [pc, #216]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x134>)
 80021ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b0:	e014      	b.n	80021dc <HAL_RCC_GetSysClockFreq+0x8c>
 80021b2:	f7ff f9b2 	bl	800151a <LL_RCC_MSI_IsEnabledRangeSelect>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d106      	bne.n	80021ca <HAL_RCC_GetSysClockFreq+0x7a>
 80021bc:	f7ff f9bd 	bl	800153a <LL_RCC_MSI_GetRange>
 80021c0:	4603      	mov	r3, r0
 80021c2:	091b      	lsrs	r3, r3, #4
 80021c4:	f003 030f 	and.w	r3, r3, #15
 80021c8:	e005      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x86>
 80021ca:	f7ff f9c1 	bl	8001550 <LL_RCC_MSI_GetRangeAfterStandby>
 80021ce:	4603      	mov	r3, r0
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x134>)
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d115      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80021e8:	e012      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021f0:	4b25      	ldr	r3, [pc, #148]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x138>)
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	e00c      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d109      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80021fc:	f7ff f8a0 	bl	8001340 <LL_RCC_HSE_IsEnabledDiv2>
 8002200:	4603      	mov	r3, r0
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x138>)
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e001      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_RCC_GetSysClockFreq+0x13c>)
 800220e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002210:	f7ff f9d1 	bl	80015b6 <LL_RCC_GetSysClkSource>
 8002214:	4603      	mov	r3, r0
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d12f      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800221a:	f7ff faa3 	bl	8001764 <LL_RCC_PLL_GetMainSource>
 800221e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0xde>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d003      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0xe4>
 800222c:	e00d      	b.n	800224a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x138>)
 8002230:	60fb      	str	r3, [r7, #12]
        break;
 8002232:	e00d      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002234:	f7ff f884 	bl	8001340 <LL_RCC_HSE_IsEnabledDiv2>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d102      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800223e:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x138>)
 8002240:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002244:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002246:	60fb      	str	r3, [r7, #12]
        break;
 8002248:	e002      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	60fb      	str	r3, [r7, #12]
        break;
 800224e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002250:	f7ff fa66 	bl	8001720 <LL_RCC_PLL_GetN>
 8002254:	4602      	mov	r2, r0
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	fb03 f402 	mul.w	r4, r3, r2
 800225c:	f7ff fa77 	bl	800174e <LL_RCC_PLL_GetDivider>
 8002260:	4603      	mov	r3, r0
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	3301      	adds	r3, #1
 8002266:	fbb4 f4f3 	udiv	r4, r4, r3
 800226a:	f7ff fa65 	bl	8001738 <LL_RCC_PLL_GetR>
 800226e:	4603      	mov	r3, r0
 8002270:	0f5b      	lsrs	r3, r3, #29
 8002272:	3301      	adds	r3, #1
 8002274:	fbb4 f3f3 	udiv	r3, r4, r3
 8002278:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800227a:	697b      	ldr	r3, [r7, #20]
}
 800227c:	4618      	mov	r0, r3
 800227e:	371c      	adds	r7, #28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	08004620 	.word	0x08004620
 8002288:	00f42400 	.word	0x00f42400
 800228c:	01e84800 	.word	0x01e84800

08002290 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b598      	push	{r3, r4, r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002294:	f7ff ff5c 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 8002298:	4604      	mov	r4, r0
 800229a:	f7ff f9e6 	bl	800166a <LL_RCC_GetAHBPrescaler>
 800229e:	4603      	mov	r3, r0
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a03      	ldr	r2, [pc, #12]	@ (80022b4 <HAL_RCC_GetHCLKFreq+0x24>)
 80022a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd98      	pop	{r3, r4, r7, pc}
 80022b4:	080045c0 	.word	0x080045c0

080022b8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b8:	b598      	push	{r3, r4, r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80022bc:	f7ff ffe8 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022c0:	4604      	mov	r4, r0
 80022c2:	f7ff f9ea 	bl	800169a <LL_RCC_GetAPB1Prescaler>
 80022c6:	4603      	mov	r3, r0
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	4a03      	ldr	r2, [pc, #12]	@ (80022d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd98      	pop	{r3, r4, r7, pc}
 80022d8:	08004600 	.word	0x08004600

080022dc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b598      	push	{r3, r4, r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80022e0:	f7ff ffd6 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022e4:	4604      	mov	r4, r0
 80022e6:	f7ff f9e3 	bl	80016b0 <LL_RCC_GetAPB2Prescaler>
 80022ea:	4603      	mov	r3, r0
 80022ec:	0adb      	lsrs	r3, r3, #11
 80022ee:	4a03      	ldr	r2, [pc, #12]	@ (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd98      	pop	{r3, r4, r7, pc}
 80022fc:	08004600 	.word	0x08004600

08002300 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	4a10      	ldr	r2, [pc, #64]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002318:	f7ff f9b2 	bl	8001680 <LL_RCC_GetAHB3Prescaler>
 800231c:	4603      	mov	r3, r0
 800231e:	091b      	lsrs	r3, r3, #4
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	4a0c      	ldr	r2, [pc, #48]	@ (8002358 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002330:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4a09      	ldr	r2, [pc, #36]	@ (800235c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002336:	fba2 2303 	umull	r2, r3, r2, r3
 800233a:	0c9c      	lsrs	r4, r3, #18
 800233c:	f7fe ffc6 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 8002340:	4603      	mov	r3, r0
 8002342:	4619      	mov	r1, r3
 8002344:	4620      	mov	r0, r4
 8002346:	f000 f80b 	bl	8002360 <RCC_SetFlashLatency>
 800234a:	4603      	mov	r3, r0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	bd90      	pop	{r4, r7, pc}
 8002354:	08004620 	.word	0x08004620
 8002358:	080045c0 	.word	0x080045c0
 800235c:	431bde83 	.word	0x431bde83

08002360 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	@ 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800236a:	4a3a      	ldr	r2, [pc, #232]	@ (8002454 <RCC_SetFlashLatency+0xf4>)
 800236c:	f107 0320 	add.w	r3, r7, #32
 8002370:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002374:	6018      	str	r0, [r3, #0]
 8002376:	3304      	adds	r3, #4
 8002378:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800237a:	4a37      	ldr	r2, [pc, #220]	@ (8002458 <RCC_SetFlashLatency+0xf8>)
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002384:	6018      	str	r0, [r3, #0]
 8002386:	3304      	adds	r3, #4
 8002388:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800238a:	4a34      	ldr	r2, [pc, #208]	@ (800245c <RCC_SetFlashLatency+0xfc>)
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	ca07      	ldmia	r2, {r0, r1, r2}
 8002392:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002396:	2300      	movs	r3, #0
 8002398:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a0:	d11b      	bne.n	80023da <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80023a6:	e014      	b.n	80023d2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80023a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	3338      	adds	r3, #56	@ 0x38
 80023ae:	443b      	add	r3, r7
 80023b0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d807      	bhi.n	80023cc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	3338      	adds	r3, #56	@ 0x38
 80023c2:	443b      	add	r3, r7
 80023c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80023ca:	e021      	b.n	8002410 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80023cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ce:	3301      	adds	r3, #1
 80023d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80023d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d9e7      	bls.n	80023a8 <RCC_SetFlashLatency+0x48>
 80023d8:	e01a      	b.n	8002410 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80023da:	2300      	movs	r3, #0
 80023dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023de:	e014      	b.n	800240a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80023e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	3338      	adds	r3, #56	@ 0x38
 80023e6:	443b      	add	r3, r7
 80023e8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80023ec:	461a      	mov	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d807      	bhi.n	8002404 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80023f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	3338      	adds	r3, #56	@ 0x38
 80023fa:	443b      	add	r3, r7
 80023fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8002402:	e005      	b.n	8002410 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002406:	3301      	adds	r3, #1
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240c:	2b02      	cmp	r3, #2
 800240e:	d9e7      	bls.n	80023e0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002410:	4b13      	ldr	r3, [pc, #76]	@ (8002460 <RCC_SetFlashLatency+0x100>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 0207 	bic.w	r2, r3, #7
 8002418:	4911      	ldr	r1, [pc, #68]	@ (8002460 <RCC_SetFlashLatency+0x100>)
 800241a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002420:	f7fe fcbe 	bl	8000da0 <HAL_GetTick>
 8002424:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002426:	e008      	b.n	800243a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002428:	f7fe fcba 	bl	8000da0 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e007      	b.n	800244a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <RCC_SetFlashLatency+0x100>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002444:	429a      	cmp	r2, r3
 8002446:	d1ef      	bne.n	8002428 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3738      	adds	r7, #56	@ 0x38
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	080045a4 	.word	0x080045a4
 8002458:	080045ac 	.word	0x080045ac
 800245c:	080045b4 	.word	0x080045b4
 8002460:	58004000 	.word	0x58004000

08002464 <LL_RCC_LSE_IsReady>:
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d101      	bne.n	800247c <LL_RCC_LSE_IsReady+0x18>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <LL_RCC_LSE_IsReady+0x1a>
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <LL_RCC_SetUSARTClockSource>:
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800248e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002492:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	43db      	mvns	r3, r3
 800249c:	401a      	ands	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <LL_RCC_SetI2SClockSource>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <LL_RCC_SetLPUARTClockSource>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <LL_RCC_SetI2CClockSource>:
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002516:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8002522:	43db      	mvns	r3, r3
 8002524:	401a      	ands	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <LL_RCC_SetLPTIMClockSource>:
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800254e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	43db      	mvns	r3, r3
 800255a:	401a      	ands	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800256a:	bf00      	nop
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr

08002574 <LL_RCC_SetRNGClockSource>:
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002584:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002588:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <LL_RCC_SetADCClockSource>:
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <LL_RCC_SetRTCClockSource>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80025d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <LL_RCC_GetRTCClockSource>:
{
 80025f2:	b480      	push	{r7}
 80025f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <LL_RCC_ForceBackupDomainReset>:
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800261a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800261e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <LL_RCC_ReleaseBackupDomainReset>:
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800262e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800263a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002658:	2300      	movs	r3, #0
 800265a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800265c:	2300      	movs	r3, #0
 800265e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d058      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800266c:	f7fe fe20 	bl	80012b0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002670:	f7fe fb96 	bl	8000da0 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002676:	e009      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002678:	f7fe fb92 	bl	8000da0 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d902      	bls.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	74fb      	strb	r3, [r7, #19]
        break;
 800268a:	e006      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800268c:	4b7b      	ldr	r3, [pc, #492]	@ (800287c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002698:	d1ee      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d13c      	bne.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80026a0:	f7ff ffa7 	bl	80025f2 <LL_RCC_GetRTCClockSource>
 80026a4:	4602      	mov	r2, r0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d00f      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026ba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026bc:	f7ff ffa5 	bl	800260a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c0:	f7ff ffb3 	bl	800262a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d014      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fb62 	bl	8000da0 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80026de:	e00b      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e0:	f7fe fb5e 	bl	8000da0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d902      	bls.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	74fb      	strb	r3, [r7, #19]
            break;
 80026f6:	e004      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80026f8:	f7ff feb4 	bl	8002464 <LL_RCC_LSE_IsReady>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d1ee      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff5b 	bl	80025c8 <LL_RCC_SetRTCClockSource>
 8002712:	e004      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
 8002718:	e001      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fea9 	bl	8002486 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fe9e 	bl	8002486 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d004      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fec0 	bl	80024e0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fee6 	bl	8002542 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d004      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fedb 	bl	8002542 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fed0 	bl	8002542 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d004      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fea9 	bl	800250a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fe9e 	bl	800250a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d004      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe93 	bl	800250a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d011      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fe5e 	bl	80024b6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002802:	d107      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800280e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002812:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d010      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fea5 	bl	8002574 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	2b00      	cmp	r3, #0
 8002830:	d107      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800283c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002840:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d011      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fea3 	bl	800259e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002860:	d107      	bne.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800286c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002870:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002872:	7cbb      	ldrb	r3, [r7, #18]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	58000400 	.word	0x58000400

08002880 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002890:	4904      	ldr	r1, [pc, #16]	@ (80028a4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	58000400 	.word	0x58000400

080028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80028ac:	4b05      	ldr	r3, [pc, #20]	@ (80028c4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80028ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b2:	4a04      	ldr	r2, [pc, #16]	@ (80028c4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80028b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	58000400 	.word	0x58000400

080028c8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80028d4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	58000400 	.word	0x58000400

080028e8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <LL_PWR_ClearFlag_RFBUSY+0x14>)
 80028ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80028f2:	619a      	str	r2, [r3, #24]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	58000400 	.word	0x58000400

08002900 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b02      	cmp	r3, #2
 800290e:	d101      	bne.n	8002914 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	58000400 	.word	0x58000400

08002924 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d101      	bne.n	8002938 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	58000400 	.word	0x58000400

08002948 <LL_RCC_RF_DisableReset>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002950:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002954:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002958:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800295c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <LL_RCC_IsRFUnderReset>:
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800296c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002978:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800297c:	d101      	bne.n	8002982 <LL_RCC_IsRFUnderReset+0x1a>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <LL_RCC_IsRFUnderReset+0x1c>
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002994:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <LL_EXTI_EnableIT_32_63+0x24>)
 8002996:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800299a:	4905      	ldr	r1, [pc, #20]	@ (80029b0 <LL_EXTI_EnableIT_32_63+0x24>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	58000800 	.word	0x58000800

080029b4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
    return status;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	e052      	b.n	8002a70 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	799b      	ldrb	r3, [r3, #6]
 80029d2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80029d4:	7bbb      	ldrb	r3, [r7, #14]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_SUBGHZ_Init+0x2c>
 80029da:	7bbb      	ldrb	r3, [r7, #14]
 80029dc:	2b03      	cmp	r3, #3
 80029de:	d109      	bne.n	80029f4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe f88a 	bl	8000b00 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 80029ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80029f0:	f7ff ffcc 	bl	800298c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80029f4:	7bbb      	ldrb	r3, [r7, #14]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d126      	bne.n	8002a48 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8002a00:	f7ff ffa2 	bl	8002948 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002a04:	4b1c      	ldr	r3, [pc, #112]	@ (8002a78 <HAL_SUBGHZ_Init+0xc4>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	0cdb      	lsrs	r3, r3, #19
 8002a12:	2264      	movs	r2, #100	@ 0x64
 8002a14:	fb02 f303 	mul.w	r3, r2, r3
 8002a18:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d105      	bne.n	8002a2c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	609a      	str	r2, [r3, #8]
        break;
 8002a2a:	e007      	b.n	8002a3c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8002a32:	f7ff ff99 	bl	8002968 <LL_RCC_IsRFUnderReset>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ee      	bne.n	8002a1a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002a3c:	f7ff ff34 	bl	80028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8002a40:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002a44:	f7ff ff1c 	bl	8002880 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8002a48:	f7ff ff4e 	bl	80028e8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10a      	bne.n	8002a68 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 f976 	bl	8002d48 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	719a      	strb	r2, [r3, #6]

  return status;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000044 	.word	0x20000044

08002a7c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	461a      	mov	r2, r3
 8002a88:	460b      	mov	r3, r1
 8002a8a:	817b      	strh	r3, [r7, #10]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	799b      	ldrb	r3, [r3, #6]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d14a      	bne.n	8002b30 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	795b      	ldrb	r3, [r3, #5]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e045      	b.n	8002b32 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2202      	movs	r2, #2
 8002ab0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fa16 	bl	8002ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002ab8:	f7ff ff06 	bl	80028c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8002abc:	210d      	movs	r1, #13
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f962 	bl	8002d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f95a 	bl	8002d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8002ad4:	897b      	ldrh	r3, [r7, #10]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	4619      	mov	r1, r3
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f954 	bl	8002d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	82bb      	strh	r3, [r7, #20]
 8002ae4:	e00a      	b.n	8002afc <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002ae6:	8abb      	ldrh	r3, [r7, #20]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f949 	bl	8002d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002af6:	8abb      	ldrh	r3, [r7, #20]
 8002af8:	3301      	adds	r3, #1
 8002afa:	82bb      	strh	r3, [r7, #20]
 8002afc:	8aba      	ldrh	r2, [r7, #20]
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d3f0      	bcc.n	8002ae6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002b04:	f7ff fed0 	bl	80028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002b08:	68f8      	ldr	r0, [r7, #12]
 8002b0a:	f000 fa0f 	bl	8002f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
 8002b1a:	e001      	b.n	8002b20 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	715a      	strb	r2, [r3, #5]

    return status;
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	e000      	b.n	8002b32 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002b30:	2302      	movs	r3, #2
  }
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b086      	sub	sp, #24
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	60f8      	str	r0, [r7, #12]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	461a      	mov	r2, r3
 8002b46:	460b      	mov	r3, r1
 8002b48:	72fb      	strb	r3, [r7, #11]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	799b      	ldrb	r3, [r3, #6]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d14a      	bne.n	8002bee <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	795b      	ldrb	r3, [r3, #5]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e045      	b.n	8002bf0 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f9ba 	bl	8002ee4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8002b70:	7afb      	ldrb	r3, [r7, #11]
 8002b72:	2b84      	cmp	r3, #132	@ 0x84
 8002b74:	d002      	beq.n	8002b7c <HAL_SUBGHZ_ExecSetCmd+0x42>
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	2b94      	cmp	r3, #148	@ 0x94
 8002b7a:	d103      	bne.n	8002b84 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	711a      	strb	r2, [r3, #4]
 8002b82:	e002      	b.n	8002b8a <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002b8a:	f7ff fe9d 	bl	80028c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002b8e:	7afb      	ldrb	r3, [r7, #11]
 8002b90:	4619      	mov	r1, r3
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f8f8 	bl	8002d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	82bb      	strh	r3, [r7, #20]
 8002b9c:	e00a      	b.n	8002bb4 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002b9e:	8abb      	ldrh	r3, [r7, #20]
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f8ed 	bl	8002d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002bae:	8abb      	ldrh	r3, [r7, #20]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	82bb      	strh	r3, [r7, #20]
 8002bb4:	8aba      	ldrh	r2, [r7, #20]
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d3f0      	bcc.n	8002b9e <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002bbc:	f7ff fe74 	bl	80028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	2b84      	cmp	r3, #132	@ 0x84
 8002bc4:	d002      	beq.n	8002bcc <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f9b0 	bl	8002f2c <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	75fb      	strb	r3, [r7, #23]
 8002bd8:	e001      	b.n	8002bde <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	715a      	strb	r2, [r3, #5]

    return status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	e000      	b.n	8002bf0 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8002bee:	2302      	movs	r3, #2
  }
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	461a      	mov	r2, r3
 8002c04:	460b      	mov	r3, r1
 8002c06:	72fb      	strb	r3, [r7, #11]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	799b      	ldrb	r3, [r3, #6]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d13d      	bne.n	8002c96 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	795b      	ldrb	r3, [r3, #5]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e038      	b.n	8002c98 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f959 	bl	8002ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002c32:	f7ff fe49 	bl	80028c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8002c36:	7afb      	ldrb	r3, [r7, #11]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f8a4 	bl	8002d88 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8002c40:	2100      	movs	r1, #0
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f8a0 	bl	8002d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	82fb      	strh	r3, [r7, #22]
 8002c4c:	e009      	b.n	8002c62 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8002c4e:	69b9      	ldr	r1, [r7, #24]
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f8ef 	bl	8002e34 <SUBGHZSPI_Receive>
      pData++;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8002c5c:	8afb      	ldrh	r3, [r7, #22]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	82fb      	strh	r3, [r7, #22]
 8002c62:	8afa      	ldrh	r2, [r7, #22]
 8002c64:	893b      	ldrh	r3, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3f1      	bcc.n	8002c4e <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002c6a:	f7ff fe1d 	bl	80028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f95c 	bl	8002f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	77fb      	strb	r3, [r7, #31]
 8002c80:	e001      	b.n	8002c86 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	715a      	strb	r2, [r3, #5]

    return status;
 8002c92:	7ffb      	ldrb	r3, [r7, #31]
 8002c94:	e000      	b.n	8002c98 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002c96:	2302      	movs	r3, #2
  }
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	461a      	mov	r2, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	72fb      	strb	r3, [r7, #11]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	799b      	ldrb	r3, [r3, #6]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d13e      	bne.n	8002d3c <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	795b      	ldrb	r3, [r3, #5]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_SUBGHZ_WriteBuffer+0x2a>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e039      	b.n	8002d3e <HAL_SUBGHZ_WriteBuffer+0x9e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f907 	bl	8002ee4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002cd6:	f7ff fdf7 	bl	80028c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8002cda:	210e      	movs	r1, #14
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f853 	bl	8002d88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8002ce2:	7afb      	ldrb	r3, [r7, #11]
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f84e 	bl	8002d88 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	82bb      	strh	r3, [r7, #20]
 8002cf0:	e00a      	b.n	8002d08 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8002cf2:	8abb      	ldrh	r3, [r7, #20]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 f843 	bl	8002d88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8002d02:	8abb      	ldrh	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	82bb      	strh	r3, [r7, #20]
 8002d08:	8aba      	ldrh	r2, [r7, #20]
 8002d0a:	893b      	ldrh	r3, [r7, #8]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d3f0      	bcc.n	8002cf2 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002d10:	f7ff fdca 	bl	80028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f909 	bl	8002f2c <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	75fb      	strb	r3, [r7, #23]
 8002d26:	e001      	b.n	8002d2c <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	715a      	strb	r2, [r3, #5]

    return status;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	e000      	b.n	8002d3e <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002d3c:	2302      	movs	r3, #2
  }
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d50:	4b0c      	ldr	r3, [pc, #48]	@ (8002d84 <SUBGHZSPI_Init+0x3c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0b      	ldr	r2, [pc, #44]	@ (8002d84 <SUBGHZSPI_Init+0x3c>)
 8002d56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d5a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8002d5c:	4a09      	ldr	r2, [pc, #36]	@ (8002d84 <SUBGHZSPI_Init+0x3c>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8002d64:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <SUBGHZSPI_Init+0x3c>)
 8002d68:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8002d6c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8002d6e:	4b05      	ldr	r3, [pc, #20]	@ (8002d84 <SUBGHZSPI_Init+0x3c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <SUBGHZSPI_Init+0x3c>)
 8002d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d78:	6013      	str	r3, [r2, #0]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	58010000 	.word	0x58010000

08002d88 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002d98:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <SUBGHZSPI_Transmit+0xa0>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	0cdb      	lsrs	r3, r3, #19
 8002da6:	2264      	movs	r2, #100	@ 0x64
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d105      	bne.n	8002dc0 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	609a      	str	r2, [r3, #8]
      break;
 8002dbe:	e008      	b.n	8002dd2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002dc6:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <SUBGHZSPI_Transmit+0xa4>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d1ed      	bne.n	8002dae <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002dd2:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <SUBGHZSPI_Transmit+0xa8>)
 8002dd4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002ddc:	4b12      	ldr	r3, [pc, #72]	@ (8002e28 <SUBGHZSPI_Transmit+0xa0>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	0cdb      	lsrs	r3, r3, #19
 8002dea:	2264      	movs	r2, #100	@ 0x64
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d105      	bne.n	8002e04 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	609a      	str	r2, [r3, #8]
      break;
 8002e02:	e008      	b.n	8002e16 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002e0a:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <SUBGHZSPI_Transmit+0xa4>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d1ed      	bne.n	8002df2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8002e16:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <SUBGHZSPI_Transmit+0xa4>)
 8002e18:	68db      	ldr	r3, [r3, #12]

  return status;
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000044 	.word	0x20000044
 8002e2c:	58010000 	.word	0x58010000
 8002e30:	5801000c 	.word	0x5801000c

08002e34 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002e42:	4b25      	ldr	r3, [pc, #148]	@ (8002ed8 <SUBGHZSPI_Receive+0xa4>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	0cdb      	lsrs	r3, r3, #19
 8002e50:	2264      	movs	r2, #100	@ 0x64
 8002e52:	fb02 f303 	mul.w	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	609a      	str	r2, [r3, #8]
      break;
 8002e68:	e008      	b.n	8002e7c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8002e70:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <SUBGHZSPI_Receive+0xa8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d1ed      	bne.n	8002e58 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8002e7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ee0 <SUBGHZSPI_Receive+0xac>)
 8002e7e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	22ff      	movs	r2, #255	@ 0xff
 8002e84:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8002e86:	4b14      	ldr	r3, [pc, #80]	@ (8002ed8 <SUBGHZSPI_Receive+0xa4>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	0cdb      	lsrs	r3, r3, #19
 8002e94:	2264      	movs	r2, #100	@ 0x64
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d105      	bne.n	8002eae <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	609a      	str	r2, [r3, #8]
      break;
 8002eac:	e008      	b.n	8002ec0 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <SUBGHZSPI_Receive+0xa8>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d1ed      	bne.n	8002e9c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <SUBGHZSPI_Receive+0xa8>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]

  return status;
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000044 	.word	0x20000044
 8002edc:	58010000 	.word	0x58010000
 8002ee0:	5801000c 	.word	0x5801000c

08002ee4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	791b      	ldrb	r3, [r3, #4]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d111      	bne.n	8002f18 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8002f28 <SUBGHZ_CheckDeviceReady+0x44>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8002f04:	f7ff fce0 	bl	80028c8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1f9      	bne.n	8002f08 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8002f14:	f7ff fcc8 	bl	80028a8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f807 	bl	8002f2c <SUBGHZ_WaitOnBusy>
 8002f1e:	4603      	mov	r3, r0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000044 	.word	0x20000044

08002f2c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8002f38:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <SUBGHZ_WaitOnBusy+0x58>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	0d1b      	lsrs	r3, r3, #20
 8002f46:	2264      	movs	r2, #100	@ 0x64
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8002f4e:	f7ff fce9 	bl	8002924 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8002f52:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2202      	movs	r2, #2
 8002f62:	609a      	str	r2, [r3, #8]
      break;
 8002f64:	e009      	b.n	8002f7a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8002f6c:	f7ff fcc8 	bl	8002900 <LL_PWR_IsActiveFlag_RFBUSYS>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d0e9      	beq.n	8002f4e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000044 	.word	0x20000044

08002f88 <LL_RCC_GetUSARTClockSource>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f94:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	041b      	lsls	r3, r3, #16
 8002fa0:	4313      	orrs	r3, r2
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <LL_RCC_GetLPUARTClockSource>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002fb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4013      	ands	r3, r2
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e042      	b.n	8003062 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fd92 	bl	8000b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	@ 0x24
 8002ff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f8b3 	bl	8003178 <UART_SetConfig>
 8003012:	4603      	mov	r3, r0
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e022      	b.n	8003062 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fb1b 	bl	8003660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003038:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003048:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fba1 	bl	80037a2 <UART_CheckIdleState>
 8003060:	4603      	mov	r3, r0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b08a      	sub	sp, #40	@ 0x28
 800306e:	af02      	add	r7, sp, #8
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003080:	2b20      	cmp	r3, #32
 8003082:	d173      	bne.n	800316c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <HAL_UART_Transmit+0x26>
 800308a:	88fb      	ldrh	r3, [r7, #6]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e06c      	b.n	800316e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2221      	movs	r2, #33	@ 0x21
 80030a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a4:	f7fd fe7c 	bl	8000da0 <HAL_GetTick>
 80030a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	88fa      	ldrh	r2, [r7, #6]
 80030b6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	d108      	bne.n	80030d6 <HAL_UART_Transmit+0x6c>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	61bb      	str	r3, [r7, #24]
 80030d4:	e003      	b.n	80030de <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030de:	e02c      	b.n	800313a <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2200      	movs	r2, #0
 80030e8:	2180      	movs	r1, #128	@ 0x80
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fba7 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e039      	b.n	800316e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d10b      	bne.n	8003118 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	3302      	adds	r3, #2
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e007      	b.n	8003128 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	781a      	ldrb	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1cc      	bne.n	80030e0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	2200      	movs	r2, #0
 800314e:	2140      	movs	r1, #64	@ 0x40
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fb74 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e006      	b.n	800316e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b08c      	sub	sp, #48	@ 0x30
 800317e:	af00      	add	r7, sp, #0
 8003180:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	431a      	orrs	r2, r3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	431a      	orrs	r2, r3
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4313      	orrs	r3, r2
 800319e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b94      	ldr	r3, [pc, #592]	@ (80033f8 <UART_SetConfig+0x280>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	697a      	ldr	r2, [r7, #20]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a89      	ldr	r2, [pc, #548]	@ (80033fc <UART_SetConfig+0x284>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031e0:	4313      	orrs	r3, r2
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80031ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	f023 010f 	bic.w	r1, r3, #15
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7a      	ldr	r2, [pc, #488]	@ (8003400 <UART_SetConfig+0x288>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d127      	bne.n	800326c <UART_SetConfig+0xf4>
 800321c:	2003      	movs	r0, #3
 800321e:	f7ff feb3 	bl	8002f88 <LL_RCC_GetUSARTClockSource>
 8003222:	4603      	mov	r3, r0
 8003224:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8003228:	2b03      	cmp	r3, #3
 800322a:	d81b      	bhi.n	8003264 <UART_SetConfig+0xec>
 800322c:	a201      	add	r2, pc, #4	@ (adr r2, 8003234 <UART_SetConfig+0xbc>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003245 	.word	0x08003245
 8003238:	08003255 	.word	0x08003255
 800323c:	0800324d 	.word	0x0800324d
 8003240:	0800325d 	.word	0x0800325d
 8003244:	2301      	movs	r3, #1
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800324a:	e080      	b.n	800334e <UART_SetConfig+0x1d6>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003252:	e07c      	b.n	800334e <UART_SetConfig+0x1d6>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800325a:	e078      	b.n	800334e <UART_SetConfig+0x1d6>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003262:	e074      	b.n	800334e <UART_SetConfig+0x1d6>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326a:	e070      	b.n	800334e <UART_SetConfig+0x1d6>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a64      	ldr	r2, [pc, #400]	@ (8003404 <UART_SetConfig+0x28c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d138      	bne.n	80032e8 <UART_SetConfig+0x170>
 8003276:	200c      	movs	r0, #12
 8003278:	f7ff fe86 	bl	8002f88 <LL_RCC_GetUSARTClockSource>
 800327c:	4603      	mov	r3, r0
 800327e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8003282:	2b0c      	cmp	r3, #12
 8003284:	d82c      	bhi.n	80032e0 <UART_SetConfig+0x168>
 8003286:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <UART_SetConfig+0x114>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032c1 	.word	0x080032c1
 8003290:	080032e1 	.word	0x080032e1
 8003294:	080032e1 	.word	0x080032e1
 8003298:	080032e1 	.word	0x080032e1
 800329c:	080032d1 	.word	0x080032d1
 80032a0:	080032e1 	.word	0x080032e1
 80032a4:	080032e1 	.word	0x080032e1
 80032a8:	080032e1 	.word	0x080032e1
 80032ac:	080032c9 	.word	0x080032c9
 80032b0:	080032e1 	.word	0x080032e1
 80032b4:	080032e1 	.word	0x080032e1
 80032b8:	080032e1 	.word	0x080032e1
 80032bc:	080032d9 	.word	0x080032d9
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032c6:	e042      	b.n	800334e <UART_SetConfig+0x1d6>
 80032c8:	2302      	movs	r3, #2
 80032ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ce:	e03e      	b.n	800334e <UART_SetConfig+0x1d6>
 80032d0:	2304      	movs	r3, #4
 80032d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d6:	e03a      	b.n	800334e <UART_SetConfig+0x1d6>
 80032d8:	2308      	movs	r3, #8
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032de:	e036      	b.n	800334e <UART_SetConfig+0x1d6>
 80032e0:	2310      	movs	r3, #16
 80032e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e6:	e032      	b.n	800334e <UART_SetConfig+0x1d6>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a43      	ldr	r2, [pc, #268]	@ (80033fc <UART_SetConfig+0x284>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d12a      	bne.n	8003348 <UART_SetConfig+0x1d0>
 80032f2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80032f6:	f7ff fe59 	bl	8002fac <LL_RCC_GetLPUARTClockSource>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003300:	d01a      	beq.n	8003338 <UART_SetConfig+0x1c0>
 8003302:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003306:	d81b      	bhi.n	8003340 <UART_SetConfig+0x1c8>
 8003308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800330c:	d00c      	beq.n	8003328 <UART_SetConfig+0x1b0>
 800330e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003312:	d815      	bhi.n	8003340 <UART_SetConfig+0x1c8>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <UART_SetConfig+0x1a8>
 8003318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331c:	d008      	beq.n	8003330 <UART_SetConfig+0x1b8>
 800331e:	e00f      	b.n	8003340 <UART_SetConfig+0x1c8>
 8003320:	2300      	movs	r3, #0
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003326:	e012      	b.n	800334e <UART_SetConfig+0x1d6>
 8003328:	2302      	movs	r3, #2
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e00e      	b.n	800334e <UART_SetConfig+0x1d6>
 8003330:	2304      	movs	r3, #4
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e00a      	b.n	800334e <UART_SetConfig+0x1d6>
 8003338:	2308      	movs	r3, #8
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e006      	b.n	800334e <UART_SetConfig+0x1d6>
 8003340:	2310      	movs	r3, #16
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e002      	b.n	800334e <UART_SetConfig+0x1d6>
 8003348:	2310      	movs	r3, #16
 800334a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <UART_SetConfig+0x284>)
 8003354:	4293      	cmp	r3, r2
 8003356:	f040 80a4 	bne.w	80034a2 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800335a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800335e:	2b08      	cmp	r3, #8
 8003360:	d823      	bhi.n	80033aa <UART_SetConfig+0x232>
 8003362:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <UART_SetConfig+0x1f0>)
 8003364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003368:	0800338d 	.word	0x0800338d
 800336c:	080033ab 	.word	0x080033ab
 8003370:	08003395 	.word	0x08003395
 8003374:	080033ab 	.word	0x080033ab
 8003378:	0800339b 	.word	0x0800339b
 800337c:	080033ab 	.word	0x080033ab
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033ab 	.word	0x080033ab
 8003388:	080033a3 	.word	0x080033a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800338c:	f7fe ff94 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 8003390:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003392:	e010      	b.n	80033b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003394:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <UART_SetConfig+0x290>)
 8003396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003398:	e00d      	b.n	80033b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339a:	f7fe fed9 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800339e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80033a0:	e009      	b.n	80033b6 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80033a8:	e005      	b.n	80033b6 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80033b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 8137 	beq.w	800362c <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c2:	4a12      	ldr	r2, [pc, #72]	@ (800340c <UART_SetConfig+0x294>)
 80033c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d305      	bcc.n	80033ee <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d910      	bls.n	8003410 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033f4:	e11a      	b.n	800362c <UART_SetConfig+0x4b4>
 80033f6:	bf00      	nop
 80033f8:	cfff69f3 	.word	0xcfff69f3
 80033fc:	40008000 	.word	0x40008000
 8003400:	40013800 	.word	0x40013800
 8003404:	40004400 	.word	0x40004400
 8003408:	00f42400 	.word	0x00f42400
 800340c:	08004660 	.word	0x08004660
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	2200      	movs	r2, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	60fa      	str	r2, [r7, #12]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341c:	4a8e      	ldr	r2, [pc, #568]	@ (8003658 <UART_SetConfig+0x4e0>)
 800341e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003422:	b29b      	uxth	r3, r3
 8003424:	2200      	movs	r2, #0
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800342e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003432:	f7fc fef5 	bl	8000220 <__aeabi_uldivmod>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4610      	mov	r0, r2
 800343c:	4619      	mov	r1, r3
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	020b      	lsls	r3, r1, #8
 8003448:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800344c:	0202      	lsls	r2, r0, #8
 800344e:	6979      	ldr	r1, [r7, #20]
 8003450:	6849      	ldr	r1, [r1, #4]
 8003452:	0849      	lsrs	r1, r1, #1
 8003454:	2000      	movs	r0, #0
 8003456:	460c      	mov	r4, r1
 8003458:	4605      	mov	r5, r0
 800345a:	eb12 0804 	adds.w	r8, r2, r4
 800345e:	eb43 0905 	adc.w	r9, r3, r5
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	469a      	mov	sl, r3
 800346a:	4693      	mov	fp, r2
 800346c:	4652      	mov	r2, sl
 800346e:	465b      	mov	r3, fp
 8003470:	4640      	mov	r0, r8
 8003472:	4649      	mov	r1, r9
 8003474:	f7fc fed4 	bl	8000220 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4613      	mov	r3, r2
 800347e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003486:	d308      	bcc.n	800349a <UART_SetConfig+0x322>
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800348e:	d204      	bcs.n	800349a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e0c8      	b.n	800362c <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034a0:	e0c4      	b.n	800362c <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034aa:	d167      	bne.n	800357c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80034ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d828      	bhi.n	8003506 <UART_SetConfig+0x38e>
 80034b4:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <UART_SetConfig+0x344>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034e9 	.word	0x080034e9
 80034c4:	080034f1 	.word	0x080034f1
 80034c8:	08003507 	.word	0x08003507
 80034cc:	080034f7 	.word	0x080034f7
 80034d0:	08003507 	.word	0x08003507
 80034d4:	08003507 	.word	0x08003507
 80034d8:	08003507 	.word	0x08003507
 80034dc:	080034ff 	.word	0x080034ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe feea 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80034e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034e6:	e014      	b.n	8003512 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e8:	f7fe fef8 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80034ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ee:	e010      	b.n	8003512 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f0:	4b5a      	ldr	r3, [pc, #360]	@ (800365c <UART_SetConfig+0x4e4>)
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034f4:	e00d      	b.n	8003512 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f6:	f7fe fe2b 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80034fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034fc:	e009      	b.n	8003512 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003504:	e005      	b.n	8003512 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003510:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8089 	beq.w	800362c <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	4a4e      	ldr	r2, [pc, #312]	@ (8003658 <UART_SetConfig+0x4e0>)
 8003520:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003524:	461a      	mov	r2, r3
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	fbb3 f3f2 	udiv	r3, r3, r2
 800352c:	005a      	lsls	r2, r3, #1
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	441a      	add	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d916      	bls.n	8003574 <UART_SetConfig+0x3fc>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d212      	bcs.n	8003574 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	b29b      	uxth	r3, r3
 8003552:	f023 030f 	bic.w	r3, r3, #15
 8003556:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	b29b      	uxth	r3, r3
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	b29a      	uxth	r2, r3
 8003564:	8bfb      	ldrh	r3, [r7, #30]
 8003566:	4313      	orrs	r3, r2
 8003568:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	8bfa      	ldrh	r2, [r7, #30]
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	e05b      	b.n	800362c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800357a:	e057      	b.n	800362c <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800357c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003580:	2b08      	cmp	r3, #8
 8003582:	d828      	bhi.n	80035d6 <UART_SetConfig+0x45e>
 8003584:	a201      	add	r2, pc, #4	@ (adr r2, 800358c <UART_SetConfig+0x414>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	080035b1 	.word	0x080035b1
 8003590:	080035b9 	.word	0x080035b9
 8003594:	080035c1 	.word	0x080035c1
 8003598:	080035d7 	.word	0x080035d7
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035d7 	.word	0x080035d7
 80035a4:	080035d7 	.word	0x080035d7
 80035a8:	080035d7 	.word	0x080035d7
 80035ac:	080035cf 	.word	0x080035cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fe82 	bl	80022b8 <HAL_RCC_GetPCLK1Freq>
 80035b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035b6:	e014      	b.n	80035e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7fe fe90 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80035bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035be:	e010      	b.n	80035e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035c0:	4b26      	ldr	r3, [pc, #152]	@ (800365c <UART_SetConfig+0x4e4>)
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035c4:	e00d      	b.n	80035e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c6:	f7fe fdc3 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80035ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035cc:	e009      	b.n	80035e2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035d4:	e005      	b.n	80035e2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035e0:	bf00      	nop
    }

    if (pclk != 0U)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d021      	beq.n	800362c <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003658 <UART_SetConfig+0x4e0>)
 80035ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	441a      	add	r2, r3
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	fbb2 f3f3 	udiv	r3, r2, r3
 800360a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2b0f      	cmp	r3, #15
 8003610:	d909      	bls.n	8003626 <UART_SetConfig+0x4ae>
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003618:	d205      	bcs.n	8003626 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	b29a      	uxth	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60da      	str	r2, [r3, #12]
 8003624:	e002      	b.n	800362c <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2201      	movs	r2, #1
 8003630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2201      	movs	r2, #1
 8003638:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	2200      	movs	r2, #0
 8003640:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003648:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800364c:	4618      	mov	r0, r3
 800364e:	3730      	adds	r7, #48	@ 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	08004660 	.word	0x08004660
 800365c:	00f42400 	.word	0x00f42400

08003660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00a      	beq.n	80036f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01a      	beq.n	8003776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800375a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800375e:	d10a      	bne.n	8003776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800377a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  }
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr

080037a2 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af02      	add	r7, sp, #8
 80037a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037b2:	f7fd faf5 	bl	8000da0 <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d10e      	bne.n	80037e4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037c6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f832 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e028      	b.n	8003836 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d10e      	bne.n	8003810 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f81c 	bl	800383e <UART_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e012      	b.n	8003836 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b09c      	sub	sp, #112	@ 0x70
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	4613      	mov	r3, r2
 800384c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384e:	e0a9      	b.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	f000 80a5 	beq.w	80039a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fd faa1 	bl	8000da0 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <UART_WaitOnFlagUntilTimeout+0x32>
 800386a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386c:	2b00      	cmp	r3, #0
 800386e:	d140      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800387e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003880:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8003884:	667b      	str	r3, [r7, #100]	@ 0x64
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800388e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003890:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003894:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e6      	bne.n	8003870 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3308      	adds	r3, #8
 80038a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b4:	f023 0301 	bic.w	r3, r3, #1
 80038b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3308      	adds	r3, #8
 80038c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038c2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80038c4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80038d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e069      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0304 	and.w	r3, r3, #4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d051      	beq.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800390a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800390e:	d149      	bne.n	80039a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003918:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800392e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003938:	637b      	str	r3, [r7, #52]	@ 0x34
 800393a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800393e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e6      	bne.n	800391a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3308      	adds	r3, #8
 8003952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	613b      	str	r3, [r7, #16]
   return(result);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800396c:	623a      	str	r2, [r7, #32]
 800396e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	69f9      	ldr	r1, [r7, #28]
 8003972:	6a3a      	ldr	r2, [r7, #32]
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	61bb      	str	r3, [r7, #24]
   return(result);
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e5      	bne.n	800394c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e010      	b.n	80039c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69da      	ldr	r2, [r3, #28]
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	4013      	ands	r3, r2
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	461a      	mov	r2, r3
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	429a      	cmp	r2, r3
 80039c0:	f43f af46 	beq.w	8003850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3770      	adds	r7, #112	@ 0x70
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_UARTEx_DisableFifoMode+0x16>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e027      	b.n	8003a34 <HAL_UARTEx_DisableFifoMode+0x66>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2224      	movs	r2, #36	@ 0x24
 80039f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003a12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e02d      	b.n	8003ab2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2224      	movs	r2, #36	@ 0x24
 8003a62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f850 	bl	8003b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e02d      	b.n	8003b2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2224      	movs	r2, #36	@ 0x24
 8003ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f812 	bl	8003b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d108      	bne.n	8003b5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b58:	e031      	b.n	8003bbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b5e:	2308      	movs	r3, #8
 8003b60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	0e5b      	lsrs	r3, r3, #25
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	0f5b      	lsrs	r3, r3, #29
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b82:	7bbb      	ldrb	r3, [r7, #14]
 8003b84:	7b3a      	ldrb	r2, [r7, #12]
 8003b86:	4910      	ldr	r1, [pc, #64]	@ (8003bc8 <UARTEx_SetNbDataToProcess+0x90>)
 8003b88:	5c8a      	ldrb	r2, [r1, r2]
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b8e:	7b3a      	ldrb	r2, [r7, #12]
 8003b90:	490e      	ldr	r1, [pc, #56]	@ (8003bcc <UARTEx_SetNbDataToProcess+0x94>)
 8003b92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b94:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	7b7a      	ldrb	r2, [r7, #13]
 8003ba4:	4908      	ldr	r1, [pc, #32]	@ (8003bc8 <UARTEx_SetNbDataToProcess+0x90>)
 8003ba6:	5c8a      	ldrb	r2, [r1, r2]
 8003ba8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bac:	7b7a      	ldrb	r2, [r7, #13]
 8003bae:	4907      	ldr	r1, [pc, #28]	@ (8003bcc <UARTEx_SetNbDataToProcess+0x94>)
 8003bb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003bbe:	bf00      	nop
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	08004678 	.word	0x08004678
 8003bcc:	08004680 	.word	0x08004680

08003bd0 <siprintf>:
 8003bd0:	b40e      	push	{r1, r2, r3}
 8003bd2:	b500      	push	{lr}
 8003bd4:	b09c      	sub	sp, #112	@ 0x70
 8003bd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8003bd8:	9002      	str	r0, [sp, #8]
 8003bda:	9006      	str	r0, [sp, #24]
 8003bdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003be0:	4809      	ldr	r0, [pc, #36]	@ (8003c08 <siprintf+0x38>)
 8003be2:	9107      	str	r1, [sp, #28]
 8003be4:	9104      	str	r1, [sp, #16]
 8003be6:	4909      	ldr	r1, [pc, #36]	@ (8003c0c <siprintf+0x3c>)
 8003be8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	6800      	ldr	r0, [r0, #0]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	a902      	add	r1, sp, #8
 8003bf4:	f000 f994 	bl	8003f20 <_svfiprintf_r>
 8003bf8:	9b02      	ldr	r3, [sp, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	b01c      	add	sp, #112	@ 0x70
 8003c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c04:	b003      	add	sp, #12
 8003c06:	4770      	bx	lr
 8003c08:	20000050 	.word	0x20000050
 8003c0c:	ffff0208 	.word	0xffff0208

08003c10 <memset>:
 8003c10:	4402      	add	r2, r0
 8003c12:	4603      	mov	r3, r0
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d100      	bne.n	8003c1a <memset+0xa>
 8003c18:	4770      	bx	lr
 8003c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c1e:	e7f9      	b.n	8003c14 <memset+0x4>

08003c20 <__errno>:
 8003c20:	4b01      	ldr	r3, [pc, #4]	@ (8003c28 <__errno+0x8>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000050 	.word	0x20000050

08003c2c <__libc_init_array>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8003c64 <__libc_init_array+0x38>)
 8003c30:	4c0d      	ldr	r4, [pc, #52]	@ (8003c68 <__libc_init_array+0x3c>)
 8003c32:	1b64      	subs	r4, r4, r5
 8003c34:	10a4      	asrs	r4, r4, #2
 8003c36:	2600      	movs	r6, #0
 8003c38:	42a6      	cmp	r6, r4
 8003c3a:	d109      	bne.n	8003c50 <__libc_init_array+0x24>
 8003c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8003c6c <__libc_init_array+0x40>)
 8003c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8003c70 <__libc_init_array+0x44>)
 8003c40:	f000 fc66 	bl	8004510 <_init>
 8003c44:	1b64      	subs	r4, r4, r5
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	2600      	movs	r6, #0
 8003c4a:	42a6      	cmp	r6, r4
 8003c4c:	d105      	bne.n	8003c5a <__libc_init_array+0x2e>
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c54:	4798      	blx	r3
 8003c56:	3601      	adds	r6, #1
 8003c58:	e7ee      	b.n	8003c38 <__libc_init_array+0xc>
 8003c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5e:	4798      	blx	r3
 8003c60:	3601      	adds	r6, #1
 8003c62:	e7f2      	b.n	8003c4a <__libc_init_array+0x1e>
 8003c64:	080046c4 	.word	0x080046c4
 8003c68:	080046c4 	.word	0x080046c4
 8003c6c:	080046c4 	.word	0x080046c4
 8003c70:	080046c8 	.word	0x080046c8

08003c74 <__retarget_lock_acquire_recursive>:
 8003c74:	4770      	bx	lr

08003c76 <__retarget_lock_release_recursive>:
 8003c76:	4770      	bx	lr

08003c78 <_free_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d041      	beq.n	8003d04 <_free_r+0x8c>
 8003c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c84:	1f0c      	subs	r4, r1, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfb8      	it	lt
 8003c8a:	18e4      	addlt	r4, r4, r3
 8003c8c:	f000 f8e0 	bl	8003e50 <__malloc_lock>
 8003c90:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <_free_r+0x90>)
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	b933      	cbnz	r3, 8003ca4 <_free_r+0x2c>
 8003c96:	6063      	str	r3, [r4, #4]
 8003c98:	6014      	str	r4, [r2, #0]
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ca0:	f000 b8dc 	b.w	8003e5c <__malloc_unlock>
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d908      	bls.n	8003cba <_free_r+0x42>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	1821      	adds	r1, r4, r0
 8003cac:	428b      	cmp	r3, r1
 8003cae:	bf01      	itttt	eq
 8003cb0:	6819      	ldreq	r1, [r3, #0]
 8003cb2:	685b      	ldreq	r3, [r3, #4]
 8003cb4:	1809      	addeq	r1, r1, r0
 8003cb6:	6021      	streq	r1, [r4, #0]
 8003cb8:	e7ed      	b.n	8003c96 <_free_r+0x1e>
 8003cba:	461a      	mov	r2, r3
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	b10b      	cbz	r3, 8003cc4 <_free_r+0x4c>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d9fa      	bls.n	8003cba <_free_r+0x42>
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	1850      	adds	r0, r2, r1
 8003cc8:	42a0      	cmp	r0, r4
 8003cca:	d10b      	bne.n	8003ce4 <_free_r+0x6c>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	4401      	add	r1, r0
 8003cd0:	1850      	adds	r0, r2, r1
 8003cd2:	4283      	cmp	r3, r0
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	d1e0      	bne.n	8003c9a <_free_r+0x22>
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	6053      	str	r3, [r2, #4]
 8003cde:	4408      	add	r0, r1
 8003ce0:	6010      	str	r0, [r2, #0]
 8003ce2:	e7da      	b.n	8003c9a <_free_r+0x22>
 8003ce4:	d902      	bls.n	8003cec <_free_r+0x74>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	602b      	str	r3, [r5, #0]
 8003cea:	e7d6      	b.n	8003c9a <_free_r+0x22>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	1821      	adds	r1, r4, r0
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	bf04      	itt	eq
 8003cf4:	6819      	ldreq	r1, [r3, #0]
 8003cf6:	685b      	ldreq	r3, [r3, #4]
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	bf04      	itt	eq
 8003cfc:	1809      	addeq	r1, r1, r0
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	6054      	str	r4, [r2, #4]
 8003d02:	e7ca      	b.n	8003c9a <_free_r+0x22>
 8003d04:	bd38      	pop	{r3, r4, r5, pc}
 8003d06:	bf00      	nop
 8003d08:	200002f8 	.word	0x200002f8

08003d0c <sbrk_aligned>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8003d4c <sbrk_aligned+0x40>)
 8003d10:	460c      	mov	r4, r1
 8003d12:	6831      	ldr	r1, [r6, #0]
 8003d14:	4605      	mov	r5, r0
 8003d16:	b911      	cbnz	r1, 8003d1e <sbrk_aligned+0x12>
 8003d18:	f000 fba6 	bl	8004468 <_sbrk_r>
 8003d1c:	6030      	str	r0, [r6, #0]
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	f000 fba1 	bl	8004468 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d103      	bne.n	8003d32 <sbrk_aligned+0x26>
 8003d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d2e:	4620      	mov	r0, r4
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	1cc4      	adds	r4, r0, #3
 8003d34:	f024 0403 	bic.w	r4, r4, #3
 8003d38:	42a0      	cmp	r0, r4
 8003d3a:	d0f8      	beq.n	8003d2e <sbrk_aligned+0x22>
 8003d3c:	1a21      	subs	r1, r4, r0
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 fb92 	bl	8004468 <_sbrk_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d1f2      	bne.n	8003d2e <sbrk_aligned+0x22>
 8003d48:	e7ef      	b.n	8003d2a <sbrk_aligned+0x1e>
 8003d4a:	bf00      	nop
 8003d4c:	200002f4 	.word	0x200002f4

08003d50 <_malloc_r>:
 8003d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d54:	1ccd      	adds	r5, r1, #3
 8003d56:	f025 0503 	bic.w	r5, r5, #3
 8003d5a:	3508      	adds	r5, #8
 8003d5c:	2d0c      	cmp	r5, #12
 8003d5e:	bf38      	it	cc
 8003d60:	250c      	movcc	r5, #12
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	4606      	mov	r6, r0
 8003d66:	db01      	blt.n	8003d6c <_malloc_r+0x1c>
 8003d68:	42a9      	cmp	r1, r5
 8003d6a:	d904      	bls.n	8003d76 <_malloc_r+0x26>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	6033      	str	r3, [r6, #0]
 8003d70:	2000      	movs	r0, #0
 8003d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e4c <_malloc_r+0xfc>
 8003d7a:	f000 f869 	bl	8003e50 <__malloc_lock>
 8003d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d82:	461c      	mov	r4, r3
 8003d84:	bb44      	cbnz	r4, 8003dd8 <_malloc_r+0x88>
 8003d86:	4629      	mov	r1, r5
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f7ff ffbf 	bl	8003d0c <sbrk_aligned>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	4604      	mov	r4, r0
 8003d92:	d158      	bne.n	8003e46 <_malloc_r+0xf6>
 8003d94:	f8d8 4000 	ldr.w	r4, [r8]
 8003d98:	4627      	mov	r7, r4
 8003d9a:	2f00      	cmp	r7, #0
 8003d9c:	d143      	bne.n	8003e26 <_malloc_r+0xd6>
 8003d9e:	2c00      	cmp	r4, #0
 8003da0:	d04b      	beq.n	8003e3a <_malloc_r+0xea>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	4639      	mov	r1, r7
 8003da6:	4630      	mov	r0, r6
 8003da8:	eb04 0903 	add.w	r9, r4, r3
 8003dac:	f000 fb5c 	bl	8004468 <_sbrk_r>
 8003db0:	4581      	cmp	r9, r0
 8003db2:	d142      	bne.n	8003e3a <_malloc_r+0xea>
 8003db4:	6821      	ldr	r1, [r4, #0]
 8003db6:	1a6d      	subs	r5, r5, r1
 8003db8:	4629      	mov	r1, r5
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f7ff ffa6 	bl	8003d0c <sbrk_aligned>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d03a      	beq.n	8003e3a <_malloc_r+0xea>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	442b      	add	r3, r5
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	f8d8 3000 	ldr.w	r3, [r8]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	bb62      	cbnz	r2, 8003e2c <_malloc_r+0xdc>
 8003dd2:	f8c8 7000 	str.w	r7, [r8]
 8003dd6:	e00f      	b.n	8003df8 <_malloc_r+0xa8>
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	1b52      	subs	r2, r2, r5
 8003ddc:	d420      	bmi.n	8003e20 <_malloc_r+0xd0>
 8003dde:	2a0b      	cmp	r2, #11
 8003de0:	d917      	bls.n	8003e12 <_malloc_r+0xc2>
 8003de2:	1961      	adds	r1, r4, r5
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	6025      	str	r5, [r4, #0]
 8003de8:	bf18      	it	ne
 8003dea:	6059      	strne	r1, [r3, #4]
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	bf08      	it	eq
 8003df0:	f8c8 1000 	streq.w	r1, [r8]
 8003df4:	5162      	str	r2, [r4, r5]
 8003df6:	604b      	str	r3, [r1, #4]
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f000 f82f 	bl	8003e5c <__malloc_unlock>
 8003dfe:	f104 000b 	add.w	r0, r4, #11
 8003e02:	1d23      	adds	r3, r4, #4
 8003e04:	f020 0007 	bic.w	r0, r0, #7
 8003e08:	1ac2      	subs	r2, r0, r3
 8003e0a:	bf1c      	itt	ne
 8003e0c:	1a1b      	subne	r3, r3, r0
 8003e0e:	50a3      	strne	r3, [r4, r2]
 8003e10:	e7af      	b.n	8003d72 <_malloc_r+0x22>
 8003e12:	6862      	ldr	r2, [r4, #4]
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	bf0c      	ite	eq
 8003e18:	f8c8 2000 	streq.w	r2, [r8]
 8003e1c:	605a      	strne	r2, [r3, #4]
 8003e1e:	e7eb      	b.n	8003df8 <_malloc_r+0xa8>
 8003e20:	4623      	mov	r3, r4
 8003e22:	6864      	ldr	r4, [r4, #4]
 8003e24:	e7ae      	b.n	8003d84 <_malloc_r+0x34>
 8003e26:	463c      	mov	r4, r7
 8003e28:	687f      	ldr	r7, [r7, #4]
 8003e2a:	e7b6      	b.n	8003d9a <_malloc_r+0x4a>
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	d1fb      	bne.n	8003e2c <_malloc_r+0xdc>
 8003e34:	2300      	movs	r3, #0
 8003e36:	6053      	str	r3, [r2, #4]
 8003e38:	e7de      	b.n	8003df8 <_malloc_r+0xa8>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	6033      	str	r3, [r6, #0]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f000 f80c 	bl	8003e5c <__malloc_unlock>
 8003e44:	e794      	b.n	8003d70 <_malloc_r+0x20>
 8003e46:	6005      	str	r5, [r0, #0]
 8003e48:	e7d6      	b.n	8003df8 <_malloc_r+0xa8>
 8003e4a:	bf00      	nop
 8003e4c:	200002f8 	.word	0x200002f8

08003e50 <__malloc_lock>:
 8003e50:	4801      	ldr	r0, [pc, #4]	@ (8003e58 <__malloc_lock+0x8>)
 8003e52:	f7ff bf0f 	b.w	8003c74 <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	200002f0 	.word	0x200002f0

08003e5c <__malloc_unlock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	@ (8003e64 <__malloc_unlock+0x8>)
 8003e5e:	f7ff bf0a 	b.w	8003c76 <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	200002f0 	.word	0x200002f0

08003e68 <__ssputs_r>:
 8003e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e6c:	688e      	ldr	r6, [r1, #8]
 8003e6e:	461f      	mov	r7, r3
 8003e70:	42be      	cmp	r6, r7
 8003e72:	680b      	ldr	r3, [r1, #0]
 8003e74:	4682      	mov	sl, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4690      	mov	r8, r2
 8003e7a:	d82d      	bhi.n	8003ed8 <__ssputs_r+0x70>
 8003e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e84:	d026      	beq.n	8003ed4 <__ssputs_r+0x6c>
 8003e86:	6965      	ldr	r5, [r4, #20]
 8003e88:	6909      	ldr	r1, [r1, #16]
 8003e8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e8e:	eba3 0901 	sub.w	r9, r3, r1
 8003e92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e96:	1c7b      	adds	r3, r7, #1
 8003e98:	444b      	add	r3, r9
 8003e9a:	106d      	asrs	r5, r5, #1
 8003e9c:	429d      	cmp	r5, r3
 8003e9e:	bf38      	it	cc
 8003ea0:	461d      	movcc	r5, r3
 8003ea2:	0553      	lsls	r3, r2, #21
 8003ea4:	d527      	bpl.n	8003ef6 <__ssputs_r+0x8e>
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	f7ff ff52 	bl	8003d50 <_malloc_r>
 8003eac:	4606      	mov	r6, r0
 8003eae:	b360      	cbz	r0, 8003f0a <__ssputs_r+0xa2>
 8003eb0:	6921      	ldr	r1, [r4, #16]
 8003eb2:	464a      	mov	r2, r9
 8003eb4:	f000 fae8 	bl	8004488 <memcpy>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec2:	81a3      	strh	r3, [r4, #12]
 8003ec4:	6126      	str	r6, [r4, #16]
 8003ec6:	6165      	str	r5, [r4, #20]
 8003ec8:	444e      	add	r6, r9
 8003eca:	eba5 0509 	sub.w	r5, r5, r9
 8003ece:	6026      	str	r6, [r4, #0]
 8003ed0:	60a5      	str	r5, [r4, #8]
 8003ed2:	463e      	mov	r6, r7
 8003ed4:	42be      	cmp	r6, r7
 8003ed6:	d900      	bls.n	8003eda <__ssputs_r+0x72>
 8003ed8:	463e      	mov	r6, r7
 8003eda:	6820      	ldr	r0, [r4, #0]
 8003edc:	4632      	mov	r2, r6
 8003ede:	4641      	mov	r1, r8
 8003ee0:	f000 faa8 	bl	8004434 <memmove>
 8003ee4:	68a3      	ldr	r3, [r4, #8]
 8003ee6:	1b9b      	subs	r3, r3, r6
 8003ee8:	60a3      	str	r3, [r4, #8]
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	4433      	add	r3, r6
 8003eee:	6023      	str	r3, [r4, #0]
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	f000 fad4 	bl	80044a4 <_realloc_r>
 8003efc:	4606      	mov	r6, r0
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d1e0      	bne.n	8003ec4 <__ssputs_r+0x5c>
 8003f02:	6921      	ldr	r1, [r4, #16]
 8003f04:	4650      	mov	r0, sl
 8003f06:	f7ff feb7 	bl	8003c78 <_free_r>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	f8ca 3000 	str.w	r3, [sl]
 8003f10:	89a3      	ldrh	r3, [r4, #12]
 8003f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	e7e9      	b.n	8003ef2 <__ssputs_r+0x8a>
	...

08003f20 <_svfiprintf_r>:
 8003f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f24:	4698      	mov	r8, r3
 8003f26:	898b      	ldrh	r3, [r1, #12]
 8003f28:	061b      	lsls	r3, r3, #24
 8003f2a:	b09d      	sub	sp, #116	@ 0x74
 8003f2c:	4607      	mov	r7, r0
 8003f2e:	460d      	mov	r5, r1
 8003f30:	4614      	mov	r4, r2
 8003f32:	d510      	bpl.n	8003f56 <_svfiprintf_r+0x36>
 8003f34:	690b      	ldr	r3, [r1, #16]
 8003f36:	b973      	cbnz	r3, 8003f56 <_svfiprintf_r+0x36>
 8003f38:	2140      	movs	r1, #64	@ 0x40
 8003f3a:	f7ff ff09 	bl	8003d50 <_malloc_r>
 8003f3e:	6028      	str	r0, [r5, #0]
 8003f40:	6128      	str	r0, [r5, #16]
 8003f42:	b930      	cbnz	r0, 8003f52 <_svfiprintf_r+0x32>
 8003f44:	230c      	movs	r3, #12
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	b01d      	add	sp, #116	@ 0x74
 8003f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f52:	2340      	movs	r3, #64	@ 0x40
 8003f54:	616b      	str	r3, [r5, #20]
 8003f56:	2300      	movs	r3, #0
 8003f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f5a:	2320      	movs	r3, #32
 8003f5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f60:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f64:	2330      	movs	r3, #48	@ 0x30
 8003f66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004104 <_svfiprintf_r+0x1e4>
 8003f6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f6e:	f04f 0901 	mov.w	r9, #1
 8003f72:	4623      	mov	r3, r4
 8003f74:	469a      	mov	sl, r3
 8003f76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f7a:	b10a      	cbz	r2, 8003f80 <_svfiprintf_r+0x60>
 8003f7c:	2a25      	cmp	r2, #37	@ 0x25
 8003f7e:	d1f9      	bne.n	8003f74 <_svfiprintf_r+0x54>
 8003f80:	ebba 0b04 	subs.w	fp, sl, r4
 8003f84:	d00b      	beq.n	8003f9e <_svfiprintf_r+0x7e>
 8003f86:	465b      	mov	r3, fp
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f7ff ff6b 	bl	8003e68 <__ssputs_r>
 8003f92:	3001      	adds	r0, #1
 8003f94:	f000 80a7 	beq.w	80040e6 <_svfiprintf_r+0x1c6>
 8003f98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f9a:	445a      	add	r2, fp
 8003f9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 809f 	beq.w	80040e6 <_svfiprintf_r+0x1c6>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	f04f 32ff 	mov.w	r2, #4294967295
 8003fae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fb2:	f10a 0a01 	add.w	sl, sl, #1
 8003fb6:	9304      	str	r3, [sp, #16]
 8003fb8:	9307      	str	r3, [sp, #28]
 8003fba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fc0:	4654      	mov	r4, sl
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fc8:	484e      	ldr	r0, [pc, #312]	@ (8004104 <_svfiprintf_r+0x1e4>)
 8003fca:	f7fc f8d9 	bl	8000180 <memchr>
 8003fce:	9a04      	ldr	r2, [sp, #16]
 8003fd0:	b9d8      	cbnz	r0, 800400a <_svfiprintf_r+0xea>
 8003fd2:	06d0      	lsls	r0, r2, #27
 8003fd4:	bf44      	itt	mi
 8003fd6:	2320      	movmi	r3, #32
 8003fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fdc:	0711      	lsls	r1, r2, #28
 8003fde:	bf44      	itt	mi
 8003fe0:	232b      	movmi	r3, #43	@ 0x2b
 8003fe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fe6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fec:	d015      	beq.n	800401a <_svfiprintf_r+0xfa>
 8003fee:	9a07      	ldr	r2, [sp, #28]
 8003ff0:	4654      	mov	r4, sl
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f04f 0c0a 	mov.w	ip, #10
 8003ff8:	4621      	mov	r1, r4
 8003ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ffe:	3b30      	subs	r3, #48	@ 0x30
 8004000:	2b09      	cmp	r3, #9
 8004002:	d94b      	bls.n	800409c <_svfiprintf_r+0x17c>
 8004004:	b1b0      	cbz	r0, 8004034 <_svfiprintf_r+0x114>
 8004006:	9207      	str	r2, [sp, #28]
 8004008:	e014      	b.n	8004034 <_svfiprintf_r+0x114>
 800400a:	eba0 0308 	sub.w	r3, r0, r8
 800400e:	fa09 f303 	lsl.w	r3, r9, r3
 8004012:	4313      	orrs	r3, r2
 8004014:	9304      	str	r3, [sp, #16]
 8004016:	46a2      	mov	sl, r4
 8004018:	e7d2      	b.n	8003fc0 <_svfiprintf_r+0xa0>
 800401a:	9b03      	ldr	r3, [sp, #12]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	9103      	str	r1, [sp, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	bfbb      	ittet	lt
 8004026:	425b      	neglt	r3, r3
 8004028:	f042 0202 	orrlt.w	r2, r2, #2
 800402c:	9307      	strge	r3, [sp, #28]
 800402e:	9307      	strlt	r3, [sp, #28]
 8004030:	bfb8      	it	lt
 8004032:	9204      	strlt	r2, [sp, #16]
 8004034:	7823      	ldrb	r3, [r4, #0]
 8004036:	2b2e      	cmp	r3, #46	@ 0x2e
 8004038:	d10a      	bne.n	8004050 <_svfiprintf_r+0x130>
 800403a:	7863      	ldrb	r3, [r4, #1]
 800403c:	2b2a      	cmp	r3, #42	@ 0x2a
 800403e:	d132      	bne.n	80040a6 <_svfiprintf_r+0x186>
 8004040:	9b03      	ldr	r3, [sp, #12]
 8004042:	1d1a      	adds	r2, r3, #4
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	9203      	str	r2, [sp, #12]
 8004048:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800404c:	3402      	adds	r4, #2
 800404e:	9305      	str	r3, [sp, #20]
 8004050:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004108 <_svfiprintf_r+0x1e8>
 8004054:	7821      	ldrb	r1, [r4, #0]
 8004056:	2203      	movs	r2, #3
 8004058:	4650      	mov	r0, sl
 800405a:	f7fc f891 	bl	8000180 <memchr>
 800405e:	b138      	cbz	r0, 8004070 <_svfiprintf_r+0x150>
 8004060:	9b04      	ldr	r3, [sp, #16]
 8004062:	eba0 000a 	sub.w	r0, r0, sl
 8004066:	2240      	movs	r2, #64	@ 0x40
 8004068:	4082      	lsls	r2, r0
 800406a:	4313      	orrs	r3, r2
 800406c:	3401      	adds	r4, #1
 800406e:	9304      	str	r3, [sp, #16]
 8004070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004074:	4825      	ldr	r0, [pc, #148]	@ (800410c <_svfiprintf_r+0x1ec>)
 8004076:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800407a:	2206      	movs	r2, #6
 800407c:	f7fc f880 	bl	8000180 <memchr>
 8004080:	2800      	cmp	r0, #0
 8004082:	d036      	beq.n	80040f2 <_svfiprintf_r+0x1d2>
 8004084:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <_svfiprintf_r+0x1f0>)
 8004086:	bb1b      	cbnz	r3, 80040d0 <_svfiprintf_r+0x1b0>
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	3307      	adds	r3, #7
 800408c:	f023 0307 	bic.w	r3, r3, #7
 8004090:	3308      	adds	r3, #8
 8004092:	9303      	str	r3, [sp, #12]
 8004094:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004096:	4433      	add	r3, r6
 8004098:	9309      	str	r3, [sp, #36]	@ 0x24
 800409a:	e76a      	b.n	8003f72 <_svfiprintf_r+0x52>
 800409c:	fb0c 3202 	mla	r2, ip, r2, r3
 80040a0:	460c      	mov	r4, r1
 80040a2:	2001      	movs	r0, #1
 80040a4:	e7a8      	b.n	8003ff8 <_svfiprintf_r+0xd8>
 80040a6:	2300      	movs	r3, #0
 80040a8:	3401      	adds	r4, #1
 80040aa:	9305      	str	r3, [sp, #20]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f04f 0c0a 	mov.w	ip, #10
 80040b2:	4620      	mov	r0, r4
 80040b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040b8:	3a30      	subs	r2, #48	@ 0x30
 80040ba:	2a09      	cmp	r2, #9
 80040bc:	d903      	bls.n	80040c6 <_svfiprintf_r+0x1a6>
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0c6      	beq.n	8004050 <_svfiprintf_r+0x130>
 80040c2:	9105      	str	r1, [sp, #20]
 80040c4:	e7c4      	b.n	8004050 <_svfiprintf_r+0x130>
 80040c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ca:	4604      	mov	r4, r0
 80040cc:	2301      	movs	r3, #1
 80040ce:	e7f0      	b.n	80040b2 <_svfiprintf_r+0x192>
 80040d0:	ab03      	add	r3, sp, #12
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	462a      	mov	r2, r5
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <_svfiprintf_r+0x1f4>)
 80040d8:	a904      	add	r1, sp, #16
 80040da:	4638      	mov	r0, r7
 80040dc:	f3af 8000 	nop.w
 80040e0:	1c42      	adds	r2, r0, #1
 80040e2:	4606      	mov	r6, r0
 80040e4:	d1d6      	bne.n	8004094 <_svfiprintf_r+0x174>
 80040e6:	89ab      	ldrh	r3, [r5, #12]
 80040e8:	065b      	lsls	r3, r3, #25
 80040ea:	f53f af2d 	bmi.w	8003f48 <_svfiprintf_r+0x28>
 80040ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040f0:	e72c      	b.n	8003f4c <_svfiprintf_r+0x2c>
 80040f2:	ab03      	add	r3, sp, #12
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	462a      	mov	r2, r5
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <_svfiprintf_r+0x1f4>)
 80040fa:	a904      	add	r1, sp, #16
 80040fc:	4638      	mov	r0, r7
 80040fe:	f000 f879 	bl	80041f4 <_printf_i>
 8004102:	e7ed      	b.n	80040e0 <_svfiprintf_r+0x1c0>
 8004104:	08004688 	.word	0x08004688
 8004108:	0800468e 	.word	0x0800468e
 800410c:	08004692 	.word	0x08004692
 8004110:	00000000 	.word	0x00000000
 8004114:	08003e69 	.word	0x08003e69

08004118 <_printf_common>:
 8004118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800411c:	4616      	mov	r6, r2
 800411e:	4698      	mov	r8, r3
 8004120:	688a      	ldr	r2, [r1, #8]
 8004122:	690b      	ldr	r3, [r1, #16]
 8004124:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004128:	4293      	cmp	r3, r2
 800412a:	bfb8      	it	lt
 800412c:	4613      	movlt	r3, r2
 800412e:	6033      	str	r3, [r6, #0]
 8004130:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004134:	4607      	mov	r7, r0
 8004136:	460c      	mov	r4, r1
 8004138:	b10a      	cbz	r2, 800413e <_printf_common+0x26>
 800413a:	3301      	adds	r3, #1
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	0699      	lsls	r1, r3, #26
 8004142:	bf42      	ittt	mi
 8004144:	6833      	ldrmi	r3, [r6, #0]
 8004146:	3302      	addmi	r3, #2
 8004148:	6033      	strmi	r3, [r6, #0]
 800414a:	6825      	ldr	r5, [r4, #0]
 800414c:	f015 0506 	ands.w	r5, r5, #6
 8004150:	d106      	bne.n	8004160 <_printf_common+0x48>
 8004152:	f104 0a19 	add.w	sl, r4, #25
 8004156:	68e3      	ldr	r3, [r4, #12]
 8004158:	6832      	ldr	r2, [r6, #0]
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	42ab      	cmp	r3, r5
 800415e:	dc26      	bgt.n	80041ae <_printf_common+0x96>
 8004160:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	3b00      	subs	r3, #0
 8004168:	bf18      	it	ne
 800416a:	2301      	movne	r3, #1
 800416c:	0692      	lsls	r2, r2, #26
 800416e:	d42b      	bmi.n	80041c8 <_printf_common+0xb0>
 8004170:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004174:	4641      	mov	r1, r8
 8004176:	4638      	mov	r0, r7
 8004178:	47c8      	blx	r9
 800417a:	3001      	adds	r0, #1
 800417c:	d01e      	beq.n	80041bc <_printf_common+0xa4>
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	6922      	ldr	r2, [r4, #16]
 8004182:	f003 0306 	and.w	r3, r3, #6
 8004186:	2b04      	cmp	r3, #4
 8004188:	bf02      	ittt	eq
 800418a:	68e5      	ldreq	r5, [r4, #12]
 800418c:	6833      	ldreq	r3, [r6, #0]
 800418e:	1aed      	subeq	r5, r5, r3
 8004190:	68a3      	ldr	r3, [r4, #8]
 8004192:	bf0c      	ite	eq
 8004194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004198:	2500      	movne	r5, #0
 800419a:	4293      	cmp	r3, r2
 800419c:	bfc4      	itt	gt
 800419e:	1a9b      	subgt	r3, r3, r2
 80041a0:	18ed      	addgt	r5, r5, r3
 80041a2:	2600      	movs	r6, #0
 80041a4:	341a      	adds	r4, #26
 80041a6:	42b5      	cmp	r5, r6
 80041a8:	d11a      	bne.n	80041e0 <_printf_common+0xc8>
 80041aa:	2000      	movs	r0, #0
 80041ac:	e008      	b.n	80041c0 <_printf_common+0xa8>
 80041ae:	2301      	movs	r3, #1
 80041b0:	4652      	mov	r2, sl
 80041b2:	4641      	mov	r1, r8
 80041b4:	4638      	mov	r0, r7
 80041b6:	47c8      	blx	r9
 80041b8:	3001      	adds	r0, #1
 80041ba:	d103      	bne.n	80041c4 <_printf_common+0xac>
 80041bc:	f04f 30ff 	mov.w	r0, #4294967295
 80041c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041c4:	3501      	adds	r5, #1
 80041c6:	e7c6      	b.n	8004156 <_printf_common+0x3e>
 80041c8:	18e1      	adds	r1, r4, r3
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	2030      	movs	r0, #48	@ 0x30
 80041ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041d2:	4422      	add	r2, r4
 80041d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041dc:	3302      	adds	r3, #2
 80041de:	e7c7      	b.n	8004170 <_printf_common+0x58>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4622      	mov	r2, r4
 80041e4:	4641      	mov	r1, r8
 80041e6:	4638      	mov	r0, r7
 80041e8:	47c8      	blx	r9
 80041ea:	3001      	adds	r0, #1
 80041ec:	d0e6      	beq.n	80041bc <_printf_common+0xa4>
 80041ee:	3601      	adds	r6, #1
 80041f0:	e7d9      	b.n	80041a6 <_printf_common+0x8e>
	...

080041f4 <_printf_i>:
 80041f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041f8:	7e0f      	ldrb	r7, [r1, #24]
 80041fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041fc:	2f78      	cmp	r7, #120	@ 0x78
 80041fe:	4691      	mov	r9, r2
 8004200:	4680      	mov	r8, r0
 8004202:	460c      	mov	r4, r1
 8004204:	469a      	mov	sl, r3
 8004206:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800420a:	d807      	bhi.n	800421c <_printf_i+0x28>
 800420c:	2f62      	cmp	r7, #98	@ 0x62
 800420e:	d80a      	bhi.n	8004226 <_printf_i+0x32>
 8004210:	2f00      	cmp	r7, #0
 8004212:	f000 80d2 	beq.w	80043ba <_printf_i+0x1c6>
 8004216:	2f58      	cmp	r7, #88	@ 0x58
 8004218:	f000 80b9 	beq.w	800438e <_printf_i+0x19a>
 800421c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004220:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004224:	e03a      	b.n	800429c <_printf_i+0xa8>
 8004226:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800422a:	2b15      	cmp	r3, #21
 800422c:	d8f6      	bhi.n	800421c <_printf_i+0x28>
 800422e:	a101      	add	r1, pc, #4	@ (adr r1, 8004234 <_printf_i+0x40>)
 8004230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004234:	0800428d 	.word	0x0800428d
 8004238:	080042a1 	.word	0x080042a1
 800423c:	0800421d 	.word	0x0800421d
 8004240:	0800421d 	.word	0x0800421d
 8004244:	0800421d 	.word	0x0800421d
 8004248:	0800421d 	.word	0x0800421d
 800424c:	080042a1 	.word	0x080042a1
 8004250:	0800421d 	.word	0x0800421d
 8004254:	0800421d 	.word	0x0800421d
 8004258:	0800421d 	.word	0x0800421d
 800425c:	0800421d 	.word	0x0800421d
 8004260:	080043a1 	.word	0x080043a1
 8004264:	080042cb 	.word	0x080042cb
 8004268:	0800435b 	.word	0x0800435b
 800426c:	0800421d 	.word	0x0800421d
 8004270:	0800421d 	.word	0x0800421d
 8004274:	080043c3 	.word	0x080043c3
 8004278:	0800421d 	.word	0x0800421d
 800427c:	080042cb 	.word	0x080042cb
 8004280:	0800421d 	.word	0x0800421d
 8004284:	0800421d 	.word	0x0800421d
 8004288:	08004363 	.word	0x08004363
 800428c:	6833      	ldr	r3, [r6, #0]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6032      	str	r2, [r6, #0]
 8004294:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004298:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800429c:	2301      	movs	r3, #1
 800429e:	e09d      	b.n	80043dc <_printf_i+0x1e8>
 80042a0:	6833      	ldr	r3, [r6, #0]
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	1d19      	adds	r1, r3, #4
 80042a6:	6031      	str	r1, [r6, #0]
 80042a8:	0606      	lsls	r6, r0, #24
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0xbc>
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	e003      	b.n	80042b8 <_printf_i+0xc4>
 80042b0:	0645      	lsls	r5, r0, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0xb8>
 80042b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042b8:	2d00      	cmp	r5, #0
 80042ba:	da03      	bge.n	80042c4 <_printf_i+0xd0>
 80042bc:	232d      	movs	r3, #45	@ 0x2d
 80042be:	426d      	negs	r5, r5
 80042c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042c4:	4859      	ldr	r0, [pc, #356]	@ (800442c <_printf_i+0x238>)
 80042c6:	230a      	movs	r3, #10
 80042c8:	e011      	b.n	80042ee <_printf_i+0xfa>
 80042ca:	6821      	ldr	r1, [r4, #0]
 80042cc:	6833      	ldr	r3, [r6, #0]
 80042ce:	0608      	lsls	r0, r1, #24
 80042d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80042d4:	d402      	bmi.n	80042dc <_printf_i+0xe8>
 80042d6:	0649      	lsls	r1, r1, #25
 80042d8:	bf48      	it	mi
 80042da:	b2ad      	uxthmi	r5, r5
 80042dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80042de:	4853      	ldr	r0, [pc, #332]	@ (800442c <_printf_i+0x238>)
 80042e0:	6033      	str	r3, [r6, #0]
 80042e2:	bf14      	ite	ne
 80042e4:	230a      	movne	r3, #10
 80042e6:	2308      	moveq	r3, #8
 80042e8:	2100      	movs	r1, #0
 80042ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042ee:	6866      	ldr	r6, [r4, #4]
 80042f0:	60a6      	str	r6, [r4, #8]
 80042f2:	2e00      	cmp	r6, #0
 80042f4:	bfa2      	ittt	ge
 80042f6:	6821      	ldrge	r1, [r4, #0]
 80042f8:	f021 0104 	bicge.w	r1, r1, #4
 80042fc:	6021      	strge	r1, [r4, #0]
 80042fe:	b90d      	cbnz	r5, 8004304 <_printf_i+0x110>
 8004300:	2e00      	cmp	r6, #0
 8004302:	d04b      	beq.n	800439c <_printf_i+0x1a8>
 8004304:	4616      	mov	r6, r2
 8004306:	fbb5 f1f3 	udiv	r1, r5, r3
 800430a:	fb03 5711 	mls	r7, r3, r1, r5
 800430e:	5dc7      	ldrb	r7, [r0, r7]
 8004310:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004314:	462f      	mov	r7, r5
 8004316:	42bb      	cmp	r3, r7
 8004318:	460d      	mov	r5, r1
 800431a:	d9f4      	bls.n	8004306 <_printf_i+0x112>
 800431c:	2b08      	cmp	r3, #8
 800431e:	d10b      	bne.n	8004338 <_printf_i+0x144>
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	07df      	lsls	r7, r3, #31
 8004324:	d508      	bpl.n	8004338 <_printf_i+0x144>
 8004326:	6923      	ldr	r3, [r4, #16]
 8004328:	6861      	ldr	r1, [r4, #4]
 800432a:	4299      	cmp	r1, r3
 800432c:	bfde      	ittt	le
 800432e:	2330      	movle	r3, #48	@ 0x30
 8004330:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004334:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004338:	1b92      	subs	r2, r2, r6
 800433a:	6122      	str	r2, [r4, #16]
 800433c:	f8cd a000 	str.w	sl, [sp]
 8004340:	464b      	mov	r3, r9
 8004342:	aa03      	add	r2, sp, #12
 8004344:	4621      	mov	r1, r4
 8004346:	4640      	mov	r0, r8
 8004348:	f7ff fee6 	bl	8004118 <_printf_common>
 800434c:	3001      	adds	r0, #1
 800434e:	d14a      	bne.n	80043e6 <_printf_i+0x1f2>
 8004350:	f04f 30ff 	mov.w	r0, #4294967295
 8004354:	b004      	add	sp, #16
 8004356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f043 0320 	orr.w	r3, r3, #32
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	4833      	ldr	r0, [pc, #204]	@ (8004430 <_printf_i+0x23c>)
 8004364:	2778      	movs	r7, #120	@ 0x78
 8004366:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	6831      	ldr	r1, [r6, #0]
 800436e:	061f      	lsls	r7, r3, #24
 8004370:	f851 5b04 	ldr.w	r5, [r1], #4
 8004374:	d402      	bmi.n	800437c <_printf_i+0x188>
 8004376:	065f      	lsls	r7, r3, #25
 8004378:	bf48      	it	mi
 800437a:	b2ad      	uxthmi	r5, r5
 800437c:	6031      	str	r1, [r6, #0]
 800437e:	07d9      	lsls	r1, r3, #31
 8004380:	bf44      	itt	mi
 8004382:	f043 0320 	orrmi.w	r3, r3, #32
 8004386:	6023      	strmi	r3, [r4, #0]
 8004388:	b11d      	cbz	r5, 8004392 <_printf_i+0x19e>
 800438a:	2310      	movs	r3, #16
 800438c:	e7ac      	b.n	80042e8 <_printf_i+0xf4>
 800438e:	4827      	ldr	r0, [pc, #156]	@ (800442c <_printf_i+0x238>)
 8004390:	e7e9      	b.n	8004366 <_printf_i+0x172>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	f023 0320 	bic.w	r3, r3, #32
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	e7f6      	b.n	800438a <_printf_i+0x196>
 800439c:	4616      	mov	r6, r2
 800439e:	e7bd      	b.n	800431c <_printf_i+0x128>
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	6825      	ldr	r5, [r4, #0]
 80043a4:	6961      	ldr	r1, [r4, #20]
 80043a6:	1d18      	adds	r0, r3, #4
 80043a8:	6030      	str	r0, [r6, #0]
 80043aa:	062e      	lsls	r6, r5, #24
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	d501      	bpl.n	80043b4 <_printf_i+0x1c0>
 80043b0:	6019      	str	r1, [r3, #0]
 80043b2:	e002      	b.n	80043ba <_printf_i+0x1c6>
 80043b4:	0668      	lsls	r0, r5, #25
 80043b6:	d5fb      	bpl.n	80043b0 <_printf_i+0x1bc>
 80043b8:	8019      	strh	r1, [r3, #0]
 80043ba:	2300      	movs	r3, #0
 80043bc:	6123      	str	r3, [r4, #16]
 80043be:	4616      	mov	r6, r2
 80043c0:	e7bc      	b.n	800433c <_printf_i+0x148>
 80043c2:	6833      	ldr	r3, [r6, #0]
 80043c4:	1d1a      	adds	r2, r3, #4
 80043c6:	6032      	str	r2, [r6, #0]
 80043c8:	681e      	ldr	r6, [r3, #0]
 80043ca:	6862      	ldr	r2, [r4, #4]
 80043cc:	2100      	movs	r1, #0
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7fb fed6 	bl	8000180 <memchr>
 80043d4:	b108      	cbz	r0, 80043da <_printf_i+0x1e6>
 80043d6:	1b80      	subs	r0, r0, r6
 80043d8:	6060      	str	r0, [r4, #4]
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	2300      	movs	r3, #0
 80043e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043e4:	e7aa      	b.n	800433c <_printf_i+0x148>
 80043e6:	6923      	ldr	r3, [r4, #16]
 80043e8:	4632      	mov	r2, r6
 80043ea:	4649      	mov	r1, r9
 80043ec:	4640      	mov	r0, r8
 80043ee:	47d0      	blx	sl
 80043f0:	3001      	adds	r0, #1
 80043f2:	d0ad      	beq.n	8004350 <_printf_i+0x15c>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	079b      	lsls	r3, r3, #30
 80043f8:	d413      	bmi.n	8004422 <_printf_i+0x22e>
 80043fa:	68e0      	ldr	r0, [r4, #12]
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	4298      	cmp	r0, r3
 8004400:	bfb8      	it	lt
 8004402:	4618      	movlt	r0, r3
 8004404:	e7a6      	b.n	8004354 <_printf_i+0x160>
 8004406:	2301      	movs	r3, #1
 8004408:	4632      	mov	r2, r6
 800440a:	4649      	mov	r1, r9
 800440c:	4640      	mov	r0, r8
 800440e:	47d0      	blx	sl
 8004410:	3001      	adds	r0, #1
 8004412:	d09d      	beq.n	8004350 <_printf_i+0x15c>
 8004414:	3501      	adds	r5, #1
 8004416:	68e3      	ldr	r3, [r4, #12]
 8004418:	9903      	ldr	r1, [sp, #12]
 800441a:	1a5b      	subs	r3, r3, r1
 800441c:	42ab      	cmp	r3, r5
 800441e:	dcf2      	bgt.n	8004406 <_printf_i+0x212>
 8004420:	e7eb      	b.n	80043fa <_printf_i+0x206>
 8004422:	2500      	movs	r5, #0
 8004424:	f104 0619 	add.w	r6, r4, #25
 8004428:	e7f5      	b.n	8004416 <_printf_i+0x222>
 800442a:	bf00      	nop
 800442c:	08004699 	.word	0x08004699
 8004430:	080046aa 	.word	0x080046aa

08004434 <memmove>:
 8004434:	4288      	cmp	r0, r1
 8004436:	b510      	push	{r4, lr}
 8004438:	eb01 0402 	add.w	r4, r1, r2
 800443c:	d902      	bls.n	8004444 <memmove+0x10>
 800443e:	4284      	cmp	r4, r0
 8004440:	4623      	mov	r3, r4
 8004442:	d807      	bhi.n	8004454 <memmove+0x20>
 8004444:	1e43      	subs	r3, r0, #1
 8004446:	42a1      	cmp	r1, r4
 8004448:	d008      	beq.n	800445c <memmove+0x28>
 800444a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800444e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004452:	e7f8      	b.n	8004446 <memmove+0x12>
 8004454:	4402      	add	r2, r0
 8004456:	4601      	mov	r1, r0
 8004458:	428a      	cmp	r2, r1
 800445a:	d100      	bne.n	800445e <memmove+0x2a>
 800445c:	bd10      	pop	{r4, pc}
 800445e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004462:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004466:	e7f7      	b.n	8004458 <memmove+0x24>

08004468 <_sbrk_r>:
 8004468:	b538      	push	{r3, r4, r5, lr}
 800446a:	4d06      	ldr	r5, [pc, #24]	@ (8004484 <_sbrk_r+0x1c>)
 800446c:	2300      	movs	r3, #0
 800446e:	4604      	mov	r4, r0
 8004470:	4608      	mov	r0, r1
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	f7fc fbc2 	bl	8000bfc <_sbrk>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_sbrk_r+0x1a>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_sbrk_r+0x1a>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	200002ec 	.word	0x200002ec

08004488 <memcpy>:
 8004488:	440a      	add	r2, r1
 800448a:	4291      	cmp	r1, r2
 800448c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004490:	d100      	bne.n	8004494 <memcpy+0xc>
 8004492:	4770      	bx	lr
 8004494:	b510      	push	{r4, lr}
 8004496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800449a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800449e:	4291      	cmp	r1, r2
 80044a0:	d1f9      	bne.n	8004496 <memcpy+0xe>
 80044a2:	bd10      	pop	{r4, pc}

080044a4 <_realloc_r>:
 80044a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	4680      	mov	r8, r0
 80044aa:	4615      	mov	r5, r2
 80044ac:	460c      	mov	r4, r1
 80044ae:	b921      	cbnz	r1, 80044ba <_realloc_r+0x16>
 80044b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044b4:	4611      	mov	r1, r2
 80044b6:	f7ff bc4b 	b.w	8003d50 <_malloc_r>
 80044ba:	b92a      	cbnz	r2, 80044c8 <_realloc_r+0x24>
 80044bc:	f7ff fbdc 	bl	8003c78 <_free_r>
 80044c0:	2400      	movs	r4, #0
 80044c2:	4620      	mov	r0, r4
 80044c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c8:	f000 f81a 	bl	8004500 <_malloc_usable_size_r>
 80044cc:	4285      	cmp	r5, r0
 80044ce:	4606      	mov	r6, r0
 80044d0:	d802      	bhi.n	80044d8 <_realloc_r+0x34>
 80044d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80044d6:	d8f4      	bhi.n	80044c2 <_realloc_r+0x1e>
 80044d8:	4629      	mov	r1, r5
 80044da:	4640      	mov	r0, r8
 80044dc:	f7ff fc38 	bl	8003d50 <_malloc_r>
 80044e0:	4607      	mov	r7, r0
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0ec      	beq.n	80044c0 <_realloc_r+0x1c>
 80044e6:	42b5      	cmp	r5, r6
 80044e8:	462a      	mov	r2, r5
 80044ea:	4621      	mov	r1, r4
 80044ec:	bf28      	it	cs
 80044ee:	4632      	movcs	r2, r6
 80044f0:	f7ff ffca 	bl	8004488 <memcpy>
 80044f4:	4621      	mov	r1, r4
 80044f6:	4640      	mov	r0, r8
 80044f8:	f7ff fbbe 	bl	8003c78 <_free_r>
 80044fc:	463c      	mov	r4, r7
 80044fe:	e7e0      	b.n	80044c2 <_realloc_r+0x1e>

08004500 <_malloc_usable_size_r>:
 8004500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004504:	1f18      	subs	r0, r3, #4
 8004506:	2b00      	cmp	r3, #0
 8004508:	bfbc      	itt	lt
 800450a:	580b      	ldrlt	r3, [r1, r0]
 800450c:	18c0      	addlt	r0, r0, r3
 800450e:	4770      	bx	lr

08004510 <_init>:
 8004510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004512:	bf00      	nop
 8004514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004516:	bc08      	pop	{r3}
 8004518:	469e      	mov	lr, r3
 800451a:	4770      	bx	lr

0800451c <_fini>:
 800451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451e:	bf00      	nop
 8004520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004522:	bc08      	pop	{r3}
 8004524:	469e      	mov	lr, r3
 8004526:	4770      	bx	lr
